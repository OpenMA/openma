#ifndef forceplateTest_def_h
#define forceplateTest_def_h

#include <openma/instrument/forceplate.h>
#include <openma/base/timesequence.h>

static unsigned sample10_fpsamples = 22;

const double fp2data[132] = {
  0., -177.80544, 0., 0., 0., 0., 0., -177.8054363, 0., 0., 0., 0., -177.8054363, 0., -177.8054363, 0., 381.9178679, 0., 0., 0., 0., -382.2910167,
  0., 0., -179.17317, 0., 0., 0., 0., -179.1731704, -179.1731704, 0., 0., 0., 0., -179.1731704, -179.1731704, 0., 0., 384.8556976, 0., 0., -385.2317169, 0.,
  0., 0., 0., -696.99209, 0., 0., 0., 0., -696.992086, -696.992086, 0., 0., -696.992086, 0., -696.992086, 0., 0., 0., 1497.106821, -1498.569553, 0., 0.,
  0., 0., 0., 0., -86396.55843, 0., 0., 0., 0., -86396.55843, -86396.55843, 0., 0., -86396.55843, 0., -86396.55843, 0., 0., -185757.1335, 185575.8186, 0., 0.,
  0., 0., 0., 0., 0., -86140.94731, 0., 0., 0., 0., -86140.94731, -86140.94731, -86140.94731, 0., 0., -86140.94731, 0., -185207.5562, 0., 0., 185026.7777, 0.,
  0., 0., 0., 0., 0., 0., -45635.79967, 0., 0., 0., 0., -45635.79967, 0., -45635.79967, 0., -45635.79967, -98119.36362, 0., 0., 0., 0., 98023.59069
};

const double fp4datain[132] = {
  0., -116.4625608, 0., 0., 0., 0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, 0., -116.4625608, 0., 250.1562034, 0., 0., 0., 0., -250.400616,
  0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, -116.4625608, 0., 0., 0., 0., -116.4625608, -116.4625608, 0., 0., 250.1562034, 0., 0., -250.400616, 0.,
  0., 0., 0., -116.3976784, 0., 0., 0., 0., -116.3976784, -116.3976784, 0., 0., -116.3976784, 0., -116.3976784, 0., 0., 0., 250.016839, -250.2611154, 0., 0.,
  0., 0., 0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, -116.4625608, 0., 0., -116.4625608, 0., -116.4625608, 0., 0., -250.400616, 250.1562034, 0., 0.,
  0., 0., 0., 0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, -116.4625608, -116.4625608, 0., 0., -116.4625608, 0., -250.400616, 0., 0., 250.1562034, 0.,
  0., 0., 0., 0., 0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, 0., -116.4625608, 0., -116.4625608, -250.400616, 0., 0., 0., 0., 250.1562034
};

const double fp4dataout[132] = {
  0., -177.7969868, 0.539989329, -0.010413302, 0.000687888, -0.262339768, 0.207522954, -177.2569975, 0.529576027, -0.009725415, -0.26165188, -0.054816814, -178.0697399, 0.748200171, -177.2674108, -0.054128926, 382.345904, -1.723916413, 0.023846287, -0.023866697, 1.724499098, -382.7185996,
  0., -1.628401763, -179.1904518, 1.063254319, -0.266797539, 0.133641951, 0.564268206, -180.8188536, -178.1271975, 0.79645678, -0.133155587, 0.697910158, -0.431505493, -178.8929812, -179.7555993, 0.431112619, 4.710938051, 385.1801546, -2.857449892, 2.859121365, -385.5559296, -4.71317128,
  0., -5.301769525, 2.155438772, -697.0083441, 0.002799273, -0.008031187, 0.27274449, -3.146330754, -694.8529054, -697.0055449, -0.005231914, 0.264713304, -702.3181449, 2.430982535, -700.1546749, 0.267512577, 11.97437112, -4.647050437, 1497.147761, -1498.610522, 4.651557064, -11.98492521,
  0., 498.9583242, -1998.45586, -1540.288983, -86400.23046, 195.8926534, 378.5433657, -1499.497536, -3538.744842, -87940.51944, -86204.3378, 574.4360191, -845.4380049, -88020.14295, -3039.786518, -85825.79444, -257.8513468, 4713.770401, -182456.5589, 182272.0038, -4717.553325, 259.6929033,
  0., 639.869747, -660.0832727, -1542.299908, 62.81959263, -86139.29386, 69.15822443, -20.21352564, -2202.38318, -1479.480315, -86076.47426, -86070.13563, -87041.72402, -528.1054556, -1562.513433, -86007.31604, -1225.716863, -183786.1728, 3447.854414, -3450.959304, 183604.0125, 1227.204854,
  0., -332.6198257, 1122.575481, 536.5348869, 69.55595595, -237.7745886, -45639.25153, 789.9556553, 1659.110368, 606.0908428, -168.2186326, -45877.02612, -33.8595274, -44447.1201, 1326.490542, -45807.47016, -97412.33327, -2922.468144, -1002.903211, 1004.175175, 2924.325019, 97315.85505
};

const double fp4cal[36] = {
  1.526645006, 0.013982191, 0.045523381, -4.284280896, -5.494209837, 2.856023631,
  -0.004636592, 1.538609925, -0.018507568, 17.15964209, 5.667772272, -9.638938674,
  8.94631E-05, -0.009134669, 5.98816363, 13.23298715, 13.25026349, -4.609498183,
  -5.90651E-06, 0.002290844, -2.40358E-05, 741.8712923, -0.539397315, -0.597238765,
  0.002252567, -0.00114751, 6.89594E-05, -1.68202255, 739.6307731, 2.041639708,
  -0.001781886, -0.004845061, -0.002341907, -3.250343829, -0.593823663, 391.879169
};

void forceplatetest_fill_sample10(ma::instrument::ForcePlate* fp, const double* data)
{
  double rate = 60.0;
  double start = 0.0;
  auto fx = new ma::TimeSequence("FX1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(data   , data+22, fx->data());
  fp->setChannel("Fx", fx);
  auto fy = new ma::TimeSequence("FY1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(data+22, data+44, fy->data());
  fp->setChannel("Fy", fy);
  auto fz = new ma::TimeSequence("FZ1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(data+44, data+66, fz->data());
  fp->setChannel("Fz", fz);
  auto mx = new ma::TimeSequence("MX1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"Nmm");
  std::copy(data+66, data+88, mx->data());
  fp->setChannel("Mx", mx);
  auto my = new ma::TimeSequence("MY1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"Nmm");
  std::copy(data+88, data+110, my->data());
  fp->setChannel("My", my);
  auto mz = new ma::TimeSequence("MZ1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"Nmm");
  std::copy(data+110, data+132, mz->data());
  fp->setChannel("Mz", mz);
};

void forceplatetest_fill_sample10_type2(ma::instrument::ForcePlate* fp)
{
  forceplatetest_fill_sample10(fp, fp2data);
}

void forceplatetest_fill_sample10_type4(ma::instrument::ForcePlate* fp)
{
  forceplatetest_fill_sample10(fp, fp4datain);
  fp->setCalibrationMatrixData(fp4cal);
};

void forceplatetest_compare_sample10_wrench_at_origin(ma::instrument::ForcePlate* fp, const double* dataref)
{
  auto w = fp->wrench(ma::instrument::Location::Origin,false);
  for (unsigned i = 0 ; i < sample10_fpsamples ; ++i)
  {
    const std::string s = std::to_string(i);
    TSM_ASSERT_DELTA(s, w->data()[i],                      dataref[i],                      1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+  sample10_fpsamples], dataref[i+  sample10_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+2*sample10_fpsamples], dataref[i+2*sample10_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+3*sample10_fpsamples], dataref[i+3*sample10_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+4*sample10_fpsamples], dataref[i+4*sample10_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+5*sample10_fpsamples], dataref[i+5*sample10_fpsamples], 1e-4);
  }
};

#endif // forceplateTest_def_h