#ifndef forceplateTest_def_h
#define forceplateTest_def_h

#include <openma/instrument/forceplate.h>
#include <openma/instrument/forceplatetype3.h>
#include <openma/base/timesequence.h>

static unsigned sample10_fpsamples = 22;
static unsigned gait1_fpsamples = 17;
static unsigned gaitfb1_fpsamples = 198;

// FORCE PLATE TYPE 2 DATA

const double fp2data[132] = {
  0., -177.80544, 0., 0., 0., 0., 0., -177.8054363, 0., 0., 0., 0., -177.8054363, 0., -177.8054363, 0., 381.9178679, 0., 0., 0., 0., -382.2910167,
  0., 0., -179.17317, 0., 0., 0., 0., -179.1731704, -179.1731704, 0., 0., 0., 0., -179.1731704, -179.1731704, 0., 0., 384.8556976, 0., 0., -385.2317169, 0.,
  0., 0., 0., -696.99209, 0., 0., 0., 0., -696.992086, -696.992086, 0., 0., -696.992086, 0., -696.992086, 0., 0., 0., 1497.106821, -1498.569553, 0., 0.,
  0., 0., 0., 0., -86396.55843, 0., 0., 0., 0., -86396.55843, -86396.55843, 0., 0., -86396.55843, 0., -86396.55843, 0., 0., -185757.1335, 185575.8186, 0., 0.,
  0., 0., 0., 0., 0., -86140.94731, 0., 0., 0., 0., -86140.94731, -86140.94731, -86140.94731, 0., 0., -86140.94731, 0., -185207.5562, 0., 0., 185026.7777, 0.,
  0., 0., 0., 0., 0., 0., -45635.79967, 0., 0., 0., 0., -45635.79967, 0., -45635.79967, 0., -45635.79967, -98119.36362, 0., 0., 0., 0., 98023.59069
};

const double fp4datain[132] = {
  0., -116.4625608, 0., 0., 0., 0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, 0., -116.4625608, 0., 250.1562034, 0., 0., 0., 0., -250.400616,
  0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, -116.4625608, 0., 0., 0., 0., -116.4625608, -116.4625608, 0., 0., 250.1562034, 0., 0., -250.400616, 0.,
  0., 0., 0., -116.3976784, 0., 0., 0., 0., -116.3976784, -116.3976784, 0., 0., -116.3976784, 0., -116.3976784, 0., 0., 0., 250.016839, -250.2611154, 0., 0.,
  0., 0., 0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, -116.4625608, 0., 0., -116.4625608, 0., -116.4625608, 0., 0., -250.400616, 250.1562034, 0., 0.,
  0., 0., 0., 0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, -116.4625608, -116.4625608, 0., 0., -116.4625608, 0., -250.400616, 0., 0., 250.1562034, 0.,
  0., 0., 0., 0., 0., 0., -116.4625608, 0., 0., 0., 0., -116.4625608, 0., -116.4625608, 0., -116.4625608, -250.400616, 0., 0., 0., 0., 250.1562034
};

// FORCE PLATE TYPE 4 DATA

const double fp4dataout[132] = {
  0., -177.7969868, 0.539989329, -0.010413302, 0.000687888, -0.262339768, 0.207522954, -177.2569975, 0.529576027, -0.009725415, -0.26165188, -0.054816814, -178.0697399, 0.748200171, -177.2674108, -0.054128926, 382.345904, -1.723916413, 0.023846287, -0.023866697, 1.724499098, -382.7185996,
  0., -1.628401763, -179.1904518, 1.063254319, -0.266797539, 0.133641951, 0.564268206, -180.8188536, -178.1271975, 0.79645678, -0.133155587, 0.697910158, -0.431505493, -178.8929812, -179.7555993, 0.431112619, 4.710938051, 385.1801546, -2.857449892, 2.859121365, -385.5559296, -4.71317128,
  0., -5.301769525, 2.155438772, -697.0083441, 0.002799273, -0.008031187, 0.27274449, -3.146330754, -694.8529054, -697.0055449, -0.005231914, 0.264713304, -702.3181449, 2.430982535, -700.1546749, 0.267512577, 11.97437112, -4.647050437, 1497.147761, -1498.610522, 4.651557064, -11.98492521,
  0., 498.9583242, -1998.45586, -1540.288983, -86400.23046, 195.8926534, 378.5433657, -1499.497536, -3538.744842, -87940.51944, -86204.3378, 574.4360191, -845.4380049, -88020.14295, -3039.786518, -85825.79444, -257.8513468, 4713.770401, -182456.5589, 182272.0038, -4717.553325, 259.6929033,
  0., 639.869747, -660.0832727, -1542.299908, 62.81959263, -86139.29386, 69.15822443, -20.21352564, -2202.38318, -1479.480315, -86076.47426, -86070.13563, -87041.72402, -528.1054556, -1562.513433, -86007.31604, -1225.716863, -183786.1728, 3447.854414, -3450.959304, 183604.0125, 1227.204854,
  0., -332.6198257, 1122.575481, 536.5348869, 69.55595595, -237.7745886, -45639.25153, 789.9556553, 1659.110368, 606.0908428, -168.2186326, -45877.02612, -33.8595274, -44447.1201, 1326.490542, -45807.47016, -97412.33327, -2922.468144, -1002.903211, 1004.175175, 2924.325019, 97315.85505
};

const double fp4cal[36] = {
  1.526645006, 0.013982191, 0.045523381, -4.284280896, -5.494209837, 2.856023631,
  -0.004636592, 1.538609925, -0.018507568, 17.15964209, 5.667772272, -9.638938674,
  8.94631E-05, -0.009134669, 5.98816363, 13.23298715, 13.25026349, -4.609498183,
  -5.90651E-06, 0.002290844, -2.40358E-05, 741.8712923, -0.539397315, -0.597238765,
  0.002252567, -0.00114751, 6.89594E-05, -1.68202255, 739.6307731, 2.041639708,
  -0.001781886, -0.004845061, -0.002341907, -3.250343829, -0.593823663, 391.879169
};

// FORCE PLATE TYPE 5 DATA

const double fp5datain[136] = {
  -0.162814, -0.210117, -0.181125, -0.182956, -0.160678, -0.208896, -0.202182, -0.187839, -0.183566, -0.175937, -0.18265,  -0.186313, -0.19028,  -0.17258,  -0.184176, -0.189364, -0.203098,
  -0.066682, -0.080415, -0.065156, -0.078584, -0.052338, -0.092622, -0.081331, -0.075837, -0.075532, -0.063325, -0.076143, -0.073091, -0.095979, -0.065766, -0.074617, -0.079194, -0.0795,
  -0.043793, -0.052338, -0.025177, -0.046845, -0.031281, -0.050507, -0.061494, -0.04715,  -0.054475, -0.031891, -0.030671, -0.066682, -0.045319, -0.041962, -0.042267, -0.048981, -0.058137,
  -0.07187,  -0.083467, -0.065156, -0.062104, -0.059968, -0.075837, -0.086213, -0.086213, -0.077363, -0.062715, -0.061189, -0.076753, -0.070344, -0.077974, -0.078279, -0.074311, -0.08957,
  -0.013886, -0.017853, -0.016632, -0.001068,  0.005341, -0.016632, -0.022736, -0.015106, -0.013275, -0.000458, -0.008392, -0.004425, -0.011749, -0.009613, -0.018463, -0.017548, -0.030671,
  -0.067292, -0.065766, -0.023346, -0.027314, -0.006867, -0.027008, -0.043793, -0.032807, -0.043183, -0.020295, -0.046845, -0.042878, -0.040742, -0.03006,  -0.039826, -0.046845, -0.066987,
  -0.048981, -0.04654,  -0.020905, -0.043488, -0.027924, -0.034028, -0.07187,  -0.044709, -0.041352, -0.031891, -0.033112, -0.036164, -0.029755, -0.037385, -0.043793, -0.049592, -0.080415,
  -0.027924, -0.027619, -0.007782, -0.019989, -0.017548, -0.029755, -0.037995, -0.017853, -0.006867, -0.012055, -0.038605, -0.034028, -0.015412, -0.02884,  -0.052338, -0.034333, -0.058747
};

const double fp5dataout[153] = {
  0.934072, 0.936098, 0.084225, -0.791014, -1.069198, -0.372141, -1.364467, -0.563446, 0.105632, -0.585571, 0.658296, 0.290865, 0.567465, -0.36459, -0.214151, -0.134446, -0.644618,
  -1.613139, -1.685705, -0.733881, -0.482943, -0.168369, -1.656966, -2.378406, -1.067708, -0.459805, -0.137758, -1.819456, -1.369817, -0.74167, -1.404462, -2.961395, -2.006249, -3.819845,
  35.874054, 44.33185, 35.028599, 38.538669, 31.683601, 44.492424, 44.822778, 41.277087, 40.638552, 34.751917, 36.48176, 41.889862, 41.776964, 37.260579, 39.444418, 40.7395, 44.72067,
  -2.173685, -2.962837, -3.002722, -2.92713, -2.339375, -3.359468, -2.59013, -2.488611, -2.42885, -2.781605, -3.212493, -2.206202, -3.271178, -2.262776, -2.646729, -2.781088, -2.573186,
  -1.354635, -1.947222, -1.506959, -1.75639, -1.566817, -1.803725, -1.899998, -1.458408, -1.684952, -1.613838, -1.508508, -2.02412, -1.390111, -1.410233, -1.466781, -1.680697, -1.825992,
  1.668103, 1.547178, 0.414967, 1.118698, 0.70486, 0.907141, 1.648793, 0.992044, 0.969687, 0.784297, 1.398942, 1.36878, 0.917455, 1.082669, 1.485301, 1.428891, 2.239469,
  37.335437, 43.578775, 42.981543, 45.910098, 50.003366, 40.676707, 42.886485, 35.555181, 41.419439, 46.714136, 41.054816, 48.20659, 33.05264, 38.007717, 37.274738, 41.308647, 41.066577,
  -59.857415, -66.211856, -85.379708, -75.748326, -73.748674, -74.898042, -56.919032, -59.867737, -59.582283, -79.977002, -87.242645, -52.132435, -78.010943, -60.112557, -65.873538, -67.460514, -56.143471,
  0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0
};

const std::array<double,3> fp5rso{{ 0., 0., -16.33887 }};

const std::array<double,3> fp5sc1{{ -501.800001, 497.799993, 0. }};

const std::array<double,3> fp5sc2{{ -4.0, 497.799993, 0. }};

const std::array<double,3> fp5sc3{{ -4.0, 0., 0. }};

const std::array<double,3> fp5sc4{{ -501.800001, 0., 0. }};

const double fp5cal[48] = {
  -1.6121, 0.976148, 105.019852, -19528.01563, -19094.32813, -158.667999,
  2.450264, 3.797407, 102.728424, -19156.98047, 18638.98242, -155.205994,
  -1.303078, 0.46725, 103.483261, 19787.05273, -18830.75977, -156.345993,
  1.663982, 0.631969, 103.279465, 19710.96484, 18588.61719, -156.037994,
  -1.019092, -49.462944, -0.851459, 0, 0, -13128.5293,
  49.613453, -1.280832, -0.229795, 0, 0, 13479.35742,
  -47.475616, 1.225642, -0.148471, 0, 0, 12898.53516,
  -1.016865, -49.354858, 0.187208, 0, 0, 13099.8418
};

// FORCE PLATE TYPE 3 DATA

const double fp3datain[1584] = {
  0.1606610, 0.1606610, 0.1606610, 0.3213220, -0.3213220, 0.5623140, 0.1606610, -1.847600, -1.927930, -2.650910, -3.695210, -4.257520, -4.096860, -4.498510, -4.819830, -4.900160, -5.221490, -4.819830, -4.418180, -4.177190, -3.936200, -3.454210, -3.213220, -2.891900, -2.811570, -2.570580, -2.249260, -2.249260, -2.249260, -2.008260, -2.329590, -2.409920, -2.329590, -2.731240, -2.650910, -2.811570, -3.132890, -3.614880, -3.534540, -3.855870, -4.177190, -4.498510, -4.498510, -4.900160, -4.819830, -5.301820, -5.542810, -5.462480, -5.060830, -5.542810, -5.382150, -5.060830, -5.221490, -4.498510, -7.952730, 22.49260, 32.85520, 18.47600, -3.614880, -20.16300, -34.78310, -46.51140, -41.37020, -34.78310, -28.67800, -21.12690, -16.06610, -15.82510, -18.47600, -22.57290, -26.91070, -30.36500, -30.12400, -27.55340, -22.65320, -17.75310, -13.73650, -10.44300, -8.274050, -7.792060, -9.238010, -10.92500, -10.44300, -9.880660, -9.238010, -8.193720, -7.069090, -5.382150, -3.614880, -2.409920, -1.044300, -0.2409920, -0.08033060, 0.7229750, 1.606610, 2.972230, 4.980490, 6.265780, 6.346110, 6.185450, 5.944460, 5.462480, 7.229750, 11.32660, 8.836360, 8.515040, 10.52330, 14.21850, 13.97750, 14.45950, 14.45950, 17.51210, 16.54810, 16.38740, 15.50380, 14.86120, 14.78080, 14.05780, 14.13820, 13.73650, 12.77260, 12.21020, 11.40690, 11.40690, 10.84460, 10.44300, 10.36260, 10.20200, 10.12170, 9.639670, 9.960990, 9.960990, 9.800330, 10.04130, 9.880660, 9.960990, 10.28230, 10.28230, 10.84460, 11.00530, 11.32660, 11.72830, 11.96930, 12.21020, 12.29060, 11.48730, 11.56760, 10.92500, 10.28230, 9.559340, 7.390410, 6.185450, 4.739500, 2.891900, 2.409920, 2.329590, 2.008260, 2.249260, 2.168930, 2.008260, 2.329590, 2.249260, 2.811570, 2.570580, 2.811570, 2.972230, 3.132890, 2.972230, 3.293550, 3.534540, 3.775540, 3.775540, 4.096860, 3.614880, 3.614880, 4.016530, 4.016530, 4.016530, 4.096860, 4.016530, 4.177190, 4.498510, 4.337850, 4.498510, 4.739500, 4.900160, 5.060830, 5.141160, 5.221490, 5.141160, 5.301820, 5.301820, 5.141160, 5.141160, 4.659170, 4.659170, 4.257520, 3.454210,
  -1.121680, -1.121680, -1.442150, -1.201790, -1.362030, -1.602390, -1.201790, -0.08011970, -0.08011970, 0.8011970, 1.362030, 1.922870, 1.602390, 2.002990, 2.483710, 2.323470, 2.163230, 1.762630, 1.682510, 1.281910, 1.682510, 1.602390, 1.201790, 0.9614360, 0.8011970, 0.7210770, 0.5608380, 0.4005980, 0.4005980, 0.3204790, 0.4807180, 0.4807180, 0.2403590, 0.5608380, 0.5608380, 0.7210770, 1.041560, 1.041560, 0.9614360, 1.362030, 1.682510, 1.922870, 2.083110, 2.403590, 2.163230, 2.483710, 2.483710, 2.323470, 2.243350, 2.403590, 2.563830, 2.083110, 2.002990, 1.682510, 0.8813160, -0.8813160, 1.842750, 4.807180, 6.970410, 3.124670, 2.163230, 2.804190, 4.967420, 6.409570, 7.210770, 8.412560, 8.893280, 7.771610, 6.409570, 4.727060, 2.002990, 0.2403590, -1.362030, -1.842750, -1.602390, -0.7210770, -0.3204790, 0, -0.3204790, -1.041560, -2.323470, -3.925860, -5.287900, -6.730050, -8.172210, -10.49570, -12.17820, -13.70050, -15.46310, -16.50460, -17.70640, -18.82810, -20.67090, -21.95280, -23.15460, -23.31480, -23.39490, -23.47510, -23.71540, -24.03590, -23.55520, -22.99430, -23.39490, -24.67690, -22.91420, -22.83410, -22.11300, -23.47510, -24.19610, -25.95880, -25.87870, -22.43350, -22.03290, -21.15160, -20.35040, -19.78960, -19.14860, -18.58780, -18.10700, -17.54620, -17.06550, -16.18420, -15.54320, -14.82210, -14.02090, -14.02090, -13.46010, -13.46010, -13.13960, -13.21970, -12.97940, -13.21970, -13.21970, -13.21970, -12.89930, -13.21970, -13.21970, -14.02090, -14.26130, -14.90230, -15.06250, -15.54320, -15.94380, -16.18420, -15.86370, -15.62330, -15.70350, -14.82210, -13.78060, -12.97940, -9.934840, -8.492680, -6.489690, -4.486700, -4.326460, -3.765620, -3.605380, -3.605380, -3.365030, -3.365030, -3.365030, -3.685500, -3.765620, -4.326460, -4.406580, -4.646940, -5.047540, -5.047540, -5.448140, -5.448140, -5.528260, -5.448140, -5.368020, -5.448140, -5.928850, -5.928850, -5.768620, -5.768620, -5.608380, -5.768620, -6.089090, -6.089090, -6.409570, -6.329450, -6.730050, -6.489690, -6.810170, -7.050530, -7.210770, -7.290890, -7.210770, -7.130650, -6.970410, -7.050530, -6.489690, -6.089090, -5.848740, -5.368020,
  -3.124670, -3.124670, -2.964430, -3.284910, -3.204790, -3.605380, -2.964430, 0.4807180, 0.3204790, 2.804190, 4.807180, 5.368020, 4.967420, 5.928850, 6.730050, 6.008970, 6.409570, 5.448140, 4.566820, 4.166220, 3.365030, 2.804190, 2.403590, 1.842750, 1.602390, 0.9614360, 0.7210770, 0.8813160, 0.9614360, 0.8011970, 0.4807180, 0.7210770, 0.8813160, 1.602390, 1.362030, 1.602390, 2.002990, 3.044550, 3.284910, 4.086100, 4.646940, 5.287900, 4.887300, 5.688500, 5.768620, 5.928850, 6.008970, 5.928850, 5.688500, 5.688500, 5.127660, 4.807180, 4.807180, 3.845740, 9.534240, 29.00330, 35.25270, 70.34510, 84.44610, 80.03950, 85.08710, 99.74900, 99.66890, 93.01890, 85.72800, 76.51430, 68.58240, 61.93250, 55.84340, 49.43380, 43.82550, 38.53760, 34.77190, 30.76590, 26.43950, 23.39490, 20.11000, 17.54620, 15.46310, 12.81910, 9.133640, 8.172210, 5.448140, 1.281910, -4.166220, -10.09510, -16.58480, -22.83410, -28.52260, -32.12800, -36.69480, -41.90260, -47.19050, -52.79890, -58.48740, -64.41620, -69.38360, -74.03060, -78.91790, -82.60340, -85.64790, -86.52920, -82.60340, -73.63000, -57.44580, -27.88160, 5.448140, 14.82210, 17.62630, 19.46910, 21.47210, 21.79250, 20.91120, 19.78960, 19.30880, 18.98840, 18.18720, 18.66790, 18.10700, 17.94680, 17.78660, 17.14560, 16.42450, 15.54320, 15.06250, 14.98240, 14.18120, 13.94080, 14.02090, 13.62030, 13.62030, 13.29990, 13.54020, 13.38000, 13.05950, 13.05950, 13.05950, 13.54020, 13.46010, 14.10110, 14.50170, 14.74200, 14.98240, 14.74200, 14.82210, 14.58180, 13.94080, 13.62030, 12.49870, 11.05650, 12.25830, 9.934840, 8.011970, 5.448140, 1.602390, -1.362030, -3.124670, -4.967420, -6.329450, -7.691490, -8.733040, -9.213760, -10.09510, -10.89630, -11.53720, -12.09810, -13.46010, -13.46010, -14.02090, -14.50170, -14.98240, -15.06250, -15.38300, -15.62330, -15.70350, -15.62330, -15.86370, -15.94380, -16.18420, -16.02390, -16.58480, -17.06550, -16.98540, -17.54620, -17.94680, -18.26730, -18.34740, -18.90820, -19.22870, -19.70940, -19.30880, -19.54920, -19.22870, -18.74800, -18.18720, -17.30580, -16.02390, -14.18120,
  -0.7999370, -0.7999370, -0.7999370, -1.039920, -1.279900, -1.039920, -0.8799300, 0.3999680, 0.1599870, 1.279900, 1.999840, 2.319820, 2.079830, 2.319820, 2.719780, 2.799780, 3.039760, 2.799780, 2.479800, 2.399810, 2.239820, 1.679870, 1.759860, 1.599870, 1.359890, 1.199900, 1.439890, 1.039920, 0.9599240, 0.8799300, 1.199900, 0.7199430, 0.9599240, 1.039920, 1.039920, 0.8799300, 1.519880, 1.519880, 1.519880, 1.919850, 2.079830, 2.559800, 2.639790, 2.479800, 3.279740, 3.119750, 3.039760, 3.439730, 3.119750, 3.439730, 3.439730, 3.039760, 3.039760, 2.559800, 0.7199430, -1.359890, 8.399330, 28.31780, 34.55730, 25.83790, 27.35780, 35.11720, 35.75720, 31.43750, 28.15780, 24.47810, 21.27830, 19.35850, 17.51860, 15.59880, 13.35890, 12.15900, 12.15900, 12.71900, 13.03900, 13.51890, 13.43890, 13.51890, 13.51890, 13.11900, 10.55920, 10.55920, 10.15920, 7.839380, 5.279580, 2.399810, -0.3199750, -3.279740, -5.359570, -7.039440, -8.479330, -11.03910, -14.23890, -17.91860, -21.91830, -26.31790, -30.55760, -35.27720, -39.83680, -44.63650, -49.11610, -51.99590, -55.59560, -56.79550, -47.99620, -36.71710, -26.87790, -27.43780, -28.79770, -30.31760, -28.71770, -29.43770, -28.47770, -27.59780, -26.55790, -25.67800, -24.79800, -24.55810, -23.83810, -23.83810, -22.95820, -21.83830, -21.03830, -19.91840, -19.83840, -18.79850, -18.79850, -18.39850, -17.99860, -17.75860, -17.91860, -17.75860, -17.51860, -17.35860, -17.67860, -17.59860, -17.75860, -18.31850, -18.63850, -19.03850, -19.91840, -20.15840, -20.71840, -20.95830, -20.55840, -20.63840, -19.99840, -19.11850, -17.75860, -16.39870, -13.51890, -11.03910, -8.079360, -5.759540, -4.959610, -4.239660, -3.519720, -3.359730, -3.039760, -2.639790, -2.959770, -2.959770, -3.199750, -3.199750, -3.359730, -3.359730, -3.199750, -3.439730, -3.359730, -3.679710, -3.679710, -3.919690, -3.919690, -4.239660, -3.919690, -4.079680, -3.839700, -4.239660, -4.079680, -4.239660, -4.319660, -4.079680, -4.319660, -4.479640, -4.479640, -4.799620, -4.959610, -4.879610, -5.279580, -4.959610, -5.039600, -5.039600, -4.879610, -4.799620, -4.799620, -4.959610, -4.239660, -3.919690,
  -0.1567420, -0.1567420, -0.4702250, -1.097190, -0.3134830, -0.1567420, -0.3134830, -2.037640, -1.410670, -1.567420, -0.9404490, -1.253930, -0.9404490, -1.567420, -1.097190, -1.253930, -1.097190, -0.9404490, -0.6269660, -1.253930, -0.4702250, -1.567420, -1.410670, -0.9404490, -0.7837080, -0.7837080, -0.6269660, -0.6269660, -1.410670, -1.253930, -0.4702250, -0.7837080, -1.567420, -0.7837080, -0.7837080, -0.7837080, -0.9404490, -1.410670, -1.724160, -1.724160, -2.037640, -1.724160, -1.567420, -2.351120, -1.724160, -2.037640, -2.037640, -2.507860, -2.664610, -2.037640, -2.037640, -1.724160, -2.351120, -1.880900, -31.50500, -232.2910, -261.9150, -319.1260, -338.7180, -391.5400, -385.8980, -415.2080, -433.7040, -439.6600, -434.6440, -421.3210, -399.6910, -376.0230, -353.1390, -334.0160, -316.7750, -299.2200, -282.6050, -266.6170, -252.8240, -242.0090, -234.0150, -228.6860, -225.7080, -225.7080, -226.4920, -227.2750, -228.9990, -228.8430, -231.9770, -236.5230, -244.3600, -252.9810, -262.8560, -274.1410, -285.7400, -297.4950, -309.4080, -320.5360, -328.5300, -332.6060, -332.9190, -331.5080, -324.1410, -313.7970, -297.1820, -274.9250, -243.2630, -196.3970, -138.7160, -80.25170, -48.90340, -25.54890, -8.934270, 3.448310, 12.06910, 16.61460, 15.98760, 15.20390, 15.04720, 14.26350, 13.79330, 14.26350, 13.16630, 13.00950, 12.22580, 12.06910, 11.59890, 10.81520, 9.874720, 10.97190, 9.874720, 10.34490, 9.717980, 9.091010, 9.247750, 9.717980, 9.874720, 9.561230, 9.561230, 10.34490, 9.874720, 10.34490, 11.28540, 10.97190, 11.75560, 11.75560, 11.75560, 13.00950, 11.91240, 12.06910, 12.53930, 11.44210, 10.65840, 10.18820, 8.620780, 7.523590, 5.015730, 3.134830, 1.880900, 1.097190, 0.3134830, -0.1567420, -0.3134830, -0.9404490, -0.9404490, -1.410670, -1.567420, -0.9404490, -1.097190, -2.037640, -0.9404490, -1.410670, -0.9404490, -0.7837080, -1.253930, -2.194380, -1.567420, -1.724160, -1.253930, -2.194380, -1.724160, -1.410670, -1.724160, -1.724160, -2.194380, -1.724160, -1.410670, -1.567420, -1.567420, -1.724160, -1.880900, -2.194380, -2.664610, -1.880900, -2.351120, -1.880900, -1.880900, -1.724160, -1.410670, -1.567420, -1.410670, -1.410670,
  0, 0, -0.4721650, 0.1573880, 0.1573880, -0.6295530, -0.6295530, 0.1573880, 0.3147760, -0.1573880, 0.9443290, 0.6295530, 0.9443290, 0.6295530, 0.9443290, 1.101720, 2.046050, 1.101720, 0.6295530, 1.259110, 0.4721650, 0.3147760, 0.9443290, 0.1573880, -0.1573880, 0.6295530, -0.3147760, 0.1573880, 0.1573880, 0.3147760, 0.6295530, 0.3147760, 0.4721650, 0.4721650, 0.4721650, 0.4721650, 0.7869410, 0.6295530, 0.4721650, 1.259110, 1.101720, 0.9443290, 0.9443290, 1.259110, 0.7869410, 1.259110, 1.573880, 1.416490, 1.101720, 0.4721650, 1.101720, 0.7869410, 1.888660, 0.7869410, -10.23020, -109.3850, -125.5960, -139.6030, -126.0680, -130.4750, -115.8380, -117.0970, -125.2810, -130.9470, -133.1500, -131.5770, -125.5960, -113.4770, -100.7280, -87.35050, -74.12990, -61.69620, -53.19720, -46.74430, -42.18000, -39.50440, -38.24530, -36.35670, -36.04190, -34.78280, -34.31060, -33.20890, -33.52370, -33.83850, -35.56970, -38.08800, -40.76360, -44.06870, -48.63300, -53.66940, -58.39100, -62.95530, -66.57520, -71.13950, -74.28720, -78.22190, -81.36970, -83.25840, -83.10100, -81.21230, -78.22190, -73.34290, -66.73260, -58.23360, -42.49480, -29.11680, -23.45080, -21.40480, -16.36840, -13.53540, -11.80410, -12.59110, -11.64670, -11.80410, -11.33200, -10.85980, -10.85980, -10.23020, -10.85980, -9.915460, -9.285910, -9.443290, -8.813740, -8.813740, -8.498960, -8.341580, -8.498960, -7.712020, -7.712020, -7.554630, -8.341580, -8.498960, -8.498960, -8.971130, -8.341580, -8.498960, -8.656350, -8.656350, -8.656350, -9.128520, -9.600680, -9.758070, -10.38760, -10.38760, -10.70240, -9.443290, -9.915460, -9.285910, -8.498960, -7.869410, -6.767690, -5.036420, -4.092090, -2.203440, -2.675600, -1.573880, -1.259110, -1.573880, -1.416490, -0.9443290, -1.259110, -0.9443290, -1.573880, -0.4721650, -1.101720, -1.101720, -0.9443290, -0.7869410, -0.6295530, -1.101720, -1.259110, -1.259110, -1.731270, -0.6295530, -0.6295530, -0.7869410, -0.9443290, -1.101720, -1.101720, -1.101720, -0.7869410, -1.731270, -0.7869410, -0.9443290, -1.101720, -1.416490, -1.416490, -1.101720, -1.259110, -0.9443290, -0.7869410, -1.888660, -1.573880, -1.416490, -1.416490, -0.9443290, -1.259110, -1.101720,
  0.3128400, 0.3128400, 0.1564200, 0.3128400, -0.3128400, 0.3128400, -0.1564200, 0, -0.4692610, -0.7821010, -0.7821010, -1.251360, -0.4692610, -0.6256810, -0.9385210, -1.094940, -1.407780, -0.6256810, -1.094940, -0.7821010, -1.094940, -0.4692610, -0.4692610, -0.4692610, -0.6256810, -0.9385210, -1.094940, -0.3128400, -0.3128400, -0.1564200, -0.6256810, -0.6256810, -0.6256810, -0.9385210, -0.7821010, 0, -0.4692610, -0.9385210, -0.7821010, -0.4692610, -1.094940, -1.251360, -0.6256810, -0.4692610, -0.6256810, -1.094940, -1.251360, -0.3128400, -0.6256810, -0.9385210, -1.251360, -0.1564200, -0.9385210, -0.3128400, 0.9385210, 12.20080, 10.32370, 9.072370, 5.787550, 9.698050, 8.133850, 6.100390, 2.815560, 0.9385210, -0.7821010, -2.189880, -4.536190, -5.005450, -5.787550, -6.100390, -5.474710, -6.100390, -6.569650, -8.290270, -10.79300, -12.67000, -14.54710, -16.26770, -16.73700, -17.83190, -19.08330, -17.98830, -19.23970, -19.39610, -19.70890, -20.02180, -20.96030, -22.52450, -24.40150, -27.84280, -30.03270, -33.00470, -35.82020, -37.38440, -40.20000, -42.23350, -43.48480, -43.64120, -43.79770, -41.92060, -39.26150, -34.72530, -28.93770, -21.11670, -14.54710, -10.48020, -9.072370, -3.441240, 2.815560, 7.038910, 10.32370, 10.01090, 9.385210, 9.698050, 9.854470, 9.385210, 8.759530, 8.915950, 8.446690, 8.446690, 7.977430, 7.351750, 6.882490, 6.256810, 7.038910, 6.256810, 6.100390, 7.038910, 6.569650, 6.100390, 7.038910, 6.726070, 6.100390, 6.413230, 6.413230, 6.413230, 7.508170, 7.351750, 7.977430, 7.508170, 7.821010, 8.446690, 8.759530, 8.290270, 8.603110, 8.133850, 8.603110, 8.290270, 7.977430, 7.038910, 5.474710, 4.536190, 3.754080, 2.346300, 1.407780, 1.407780, 0.4692610, 1.251360, 0.7821010, 0.3128400, 0.3128400, 0.4692610, 0.4692610, -0.1564200, 0.7821010, 0.3128400, 0.6256810, -0.1564200, 0.9385210, 1.094940, 0.7821010, 0.6256810, 0.9385210, 1.094940, 0.6256810, 1.251360, 1.094940, 0.7821010, 1.094940, 1.251360, 1.407780, 0.4692610, 1.094940, 0.6256810, 1.564200, 1.251360, 1.564200, 0.9385210, 1.251360, 1.564200, 0.9385210, 1.407780, 1.094940, 1.251360, 0.4692610, 0.6256810, 1.407780, 0.9385210,
  0.6256810, 0.6256810, 0.7821010, 0.6256810, 0.7821010, 0.4692610, 1.094940, -0.1564200, 0.9385210, 0.3128400, -0.3128400, 0, 0.9385210, 0.3128400, 0.3128400, 0.7821010, -0.1564200, 0.1564200, 1.251360, 0.1564200, 0.9385210, 0.7821010, 0.7821010, 0.6256810, 0.6256810, 0.7821010, 0.4692610, 0.4692610, 0.7821010, 0.9385210, 0.9385210, 0.6256810, 0.4692610, 0.6256810, 0.7821010, 1.094940, 0.6256810, -0.3128400, 0.1564200, 0, -0.1564200, -0.3128400, 0.9385210, 0.4692610, 0.3128400, 0.3128400, -0.1564200, 0.4692610, 0.4692610, 0.1564200, 0.7821010, 0.6256810, 0, -0.1564200, -2.502720, -18.30120, -24.55800, -39.88710, -55.84200, -72.89180, -82.74630, -100.1090, -109.9630, -114.8120, -115.7510, -115.2820, -113.7170, -113.2480, -113.7170, -114.5000, -115.7510, -117.6280, -119.3490, -120.4440, -121.2260, -122.6330, -124.3540, -125.9180, -127.3260, -130.4540, -132.6440, -135.7730, -137.8060, -137.8060, -139.2140, -141.8730, -146.0960, -151.5710, -157.9840, -166.1180, -174.4090, -183.0120, -191.7710, -200.0610, -206.7870, -209.7590, -211.9490, -212.1060, -209.2900, -201.7820, -190.8330, -175.9730, -156.5770, -134.0520, -101.5170, -75.70740, -68.82490, -53.49570, -37.54080, -26.59140, -17.98830, -14.54710, -14.54710, -12.98290, -12.82650, -12.20080, -12.20080, -12.04440, -10.94940, -10.32370, -10.94940, -10.48020, -10.32370, -8.603110, -9.385210, -9.385210, -8.603110, -8.290270, -9.072370, -8.915950, -8.290270, -8.603110, -8.446690, -8.446690, -8.759530, -8.603110, -8.603110, -10.32370, -10.16730, -10.48020, -9.854470, -10.94940, -11.10580, -10.94940, -10.94940, -11.41870, -11.57510, -10.79300, -9.698050, -8.603110, -7.821010, -6.882490, -5.005450, -2.346300, -1.877040, -0.7821010, 0, 0.1564200, 0.9385210, 0.9385210, 1.407780, 0.9385210, 1.407780, 1.407780, 1.251360, 1.407780, 1.094940, 0.7821010, 1.251360, 1.094940, 1.564200, 1.720620, 1.720620, 0.9385210, 0.9385210, 1.407780, 1.094940, 1.564200, 0.9385210, 1.094940, 0.9385210, 1.407780, 0.7821010, 1.564200, 1.094940, 1.094940, 0.9385210, 0.9385210, 1.094940, 1.251360, 0.9385210, 1.564200, 1.407780, 1.251360, 1.094940, 1.094940, 0.6256810, 0.9385210
};

const double fp3dataout_local[1792] = {
  0.9610140, 1.2814930, 0.8804730, 1.6833560, 1.0400790, 1.0411340, 1.9277220, 2.0080530, 1.8497120, 2.3331710, 2.3346480, 2.4944650, 2.495520, 2.3361240, 2.5766940, 3.0582550, 3.0572010, 2.7356680, 2.8952740, 2.2536840, 1.8518210, 2.0114270, 1.9304640, 2.0103730, 1.8495010, 1.6884180, 1.8486570, 1.8486570, 1.6877850, 1.8488680, 1.9291990, 2.0892270, 2.1704010, 2.0900710, 2.0904930, 2.0913360, 2.573320, 2.5731090, 2.4938330, 2.4946760, 2.5756390, 2.415400, 2.4965740, 2.6566030, 2.8181070, 3.0590990, 3.1390080, 2.8174750, 3.1392190, 2.8183180, 2.9777140, 3.2184950, 2.8159980, 7.0714090, -21.611240, -34.697950, -23.2832080, -3.3555350, 17.0383030, 32.6199010, 43.7072050, 36.4028190, 28.3735590, 21.467240, 12.7143720, 7.1728290, 8.0535130, 12.0664560, 17.8458270, 24.9077450, 30.1245920, 31.4859940, 29.3961340, 24.2556110, 18.474130, 14.0570040, 10.4429730, 8.5945260, 8.833620, 11.5614840, 14.8508190, 15.730870, 16.610710, 17.410220, 18.6893920, 19.2472770, 19.0826090, 19.077970, 18.9145670, 18.7507420, 19.0691120, 20.7512030, 21.2298120, 21.5479710, 20.342590, 18.4144460, 17.2092770, 17.3693050, 17.8504450, 17.6107190, 17.5318650, 16.1651910, 13.3502470, 14.0778610, 14.3190640, 11.5897230, 9.2565520, 10.218620, 11.4992690, 11.419150, 4.9214430, 5.4848120, 4.7641560, 4.8465960, 4.9284030, 4.3677760, 4.5299130, 3.9688650, 3.809680, 4.2929290, 3.9739270, 4.1362750, 3.4151980, 3.1763150, 3.5779680, 3.0974610, 3.2581220, 3.0179740, 3.5800770, 3.0183960, 3.2587550, 3.4194160, 3.1784240, 3.0186070, 3.2587550, 2.9374320, 3.7386290, 3.4166740, 3.896970, 3.7358870, 3.8149530, 3.9745590, 3.9739270, 3.5731170, 4.1360640, 4.1358530, 3.8971810, 3.498270, 3.4200490, 2.5444270, 2.3072310, 1.750190, 1.5948010, 1.9165450, 1.4360380, 1.5971210, 1.3561290, 1.1961010, 1.3567620, 1.035440, 1.4362490, 0.9540540, 1.7558840, 1.5950120, 1.674710, 1.9146470, 2.0753080, 2.1545840, 1.9135920, 1.752720, 1.6726010, 1.2711590, 1.8332620, 2.313980, 1.9123270, 1.7520880, 1.7520880, 1.5115180, 1.7520880, 1.9119050, 1.5905830, 2.0717230, 1.8309420, 1.9905490, 1.5895280, 1.7493460, 1.9093740, 1.9892830, 2.1497330, 1.9089530, 1.8288330, 1.8292550, 1.9093740, 1.830520, 1.4299220, 1.5912160, 1.9138030, 1.592270,
  3.9246030, 3.7643640, 4.3248240, 4.4846850, 4.6453020, 3.8443580, -0.8806860, -0.4804660, -4.0840870, -6.8070210, -7.6878330, -7.0472540, -8.2486710, -9.4498360, -8.8087520, -9.4493320, -8.2479150, -7.0466240, -6.5660320, -5.6048480, -4.4840550, -4.163450, -3.4426250, -2.9622850, -2.1613410, -2.1609630, -1.9212340, -1.921360, -1.6811270, -1.6806230, -1.441020, -1.841240, -2.6423110, -2.4019520, -2.4823230, -3.5228710, -4.5644260, -4.8047850, -6.005950, -6.7267750, -7.8476940, -7.527090, -8.1682990, -9.0483550, -9.0486070, -9.0487330, -9.3685820, -8.8082480, -9.1282230, -8.5673850, -7.8469380, -7.8469380, -6.4055410, -10.2541820, -27.6434250, -43.6519840, -98.6628140, -119.003380, -105.877490, -112.444908000000, -134.866190, -135.426020, -124.456431000000, -113.885802000000, -100.992333000000, -89.8607410, -81.2909610, -73.3620130, -65.0325920, -57.1843940, -50.6965920, -46.9309680, -43.484940, -39.4784530, -36.9138680, -33.5489680, -31.0651330, -28.9820220, -25.9381050, -19.6928030, -18.7313670, -15.6073310, -9.1212920, -1.1133590, 7.6952680, 16.9047440, 26.1138430, 33.8821740, 39.1674250, 45.1741310, 52.9417060, 61.429350, 70.7174340, 80.4056130, 90.7341180, 99.9412010, 109.307767000000, 118.754704000000, 127.239828000000, 134.764019000000, 138.525107000000, 138.198958000000, 130.425461000000, 105.441988000000, 64.5987280, 21.429730, 12.6156860, 11.171390, 10.8485170, 7.2456520, 7.6451160, 7.5665090, 7.8082540, 7.2490540, 6.6896030, 6.6108690, 5.890170, 5.7310650, 5.8913040, 5.1716140, 4.692660, 4.613800, 4.3752050, 4.775930, 3.8161320, 4.6173280, 4.4577190, 3.9776310, 4.1382490, 4.2982360, 4.4587270, 3.9783870, 3.9786390, 4.6190930, 4.5390990, 4.6990860, 4.7783240, 5.1784180, 4.9374290, 5.4167610, 5.4163830, 5.7359790, 6.2163190, 5.7362310, 6.0565840, 6.0575920, 5.4981410, 5.2599240, 5.3421860, 1.2606190, 1.1042860, 0.06739300, 0.3114060, 3.3572130, 5.6016980, 6.6443870, 8.3271520, 9.3692120, 10.3312780, 11.6928080, 12.1735260, 13.2948230, 14.096020, 14.8969640, 15.4578020, 16.6598490, 16.899830, 17.3806740, 18.1813660, 18.6620840, 18.9821850, 19.3026640, 19.8629970, 19.6231420, 19.703010, 19.7033880, 20.1834760, 20.2638480, 20.2635960, 20.9044270, 21.1451640, 21.3050250, 22.025850, 22.4264480, 23.0669020, 23.3070090, 23.7878530, 24.5082990, 24.6690430, 24.3484380, 24.5887970, 24.1083310, 23.547620, 22.9867820, 22.2654530, 20.2635960, 18.1008690, 17.4594070,
  -0.7817800, 0.003868000, 0.001281000, -0.3131660, 0.004193000, 0.004515000, 2.0366720, 0.6266370, 2.1940640, 1.0910610, 1.8757410, -0.4731410, 1.2507030, 0.7785420, 0.4650550, 0.6153460, 0.3079920, -0.1590070, 0.6205070, 0.1544800, 0.9397990, 0.1535040, 0.6266410, 0.9410960, 0.3105750, 1.5674230, 0.3131580, 0.7840250, 0.1570550, -0.4721690, 0.4689310, 1.2516710, 0.6243830, 0.3115430, -0.7833980, -0.002912000, 2.0324820, 1.8776730, 0.9343120, 2.1872840, 2.3440290, 0.3102460, 1.0920170, 1.2500560, 1.5606350, 1.8715390, 0.9349500, 1.7193090, 2.3475760, 1.4051830, 0.4679550, 1.4009850, 1.5632180, 43.2994850, 347.776156000000, 401.745143000000, 489.543895000000, 514.840883000000, 585.208946000000, 576.347820, 626.313696000000, 666.132680, 684.480903000000, 684.327752000000, 670.369361000000, 643.540378000000, 607.753513000000, 573.372164000000, 541.966639000000, 512.130140, 484.644142000000, 461.720458000000, 442.095468000000, 427.022778000000, 416.816836000000, 411.161577000000, 407.228530, 405.812707000000, 408.776946000000, 412.529733000000, 414.245186000000, 419.568943000000, 419.883398000000, 426.470121000000, 436.505821000000, 452.180364000000, 471.145209000000, 493.874455000000, 521.771362000000, 548.572035000000, 576.467003000000, 603.574383000000, 629.121762000000, 649.804976000000, 662.820408000000, 669.72290, 670.513725000000, 660.330341000000, 638.711530, 605.497995000000, 558.965558000000, 495.509813000000, 409.799613000000, 297.274859000000, 195.556011000000, 150.251459000000, 103.890618000000, 60.0279250, 29.6395970, 7.3996080, 0.5126410, 0.8209590, -0.1149880, -0.7432510, -0.5881290, 0.5077770, -0.9048410, 0.1962220, -1.2170470, 0.03204900, 0.5025990, 0.6561110, 0.3448780, 0.9705500, 0.4980720, 1.1269710, -1.3815570, 0.4967710, 1.2791890, 0.3451870, 0.6580310, 0.9705500, 1.4433580, 1.1266450, 0.3439060, -0.1234230, 1.2833950, -0.4391550, 1.1285930, -0.1214710, 0.5051780, 0.9783110, 0.03721900, 1.1363460, 0.6590190, 0.3481190, 0.3464960, -0.4388380, -0.7545870, 0.4932120, -0.1408680, 0.3277260, -0.9313960, 1.2639620, -0.1489890, 0.4763620, 0.3228420, 0.009355000, 0.6334170, 0.4789330, 0.9472210, 1.2642550, 0.1612520, 0.1654460, 1.4187350, 0.1641560, 1.5719340, -0.6198810, -0.3044570, 0.1667350, 1.1071840, 0.6395430, 0.3202470, 0.3192830, 0.3221790, 0.4786040, 0.1660890, 0.7924120, 0.4795720, 0.6350200, 1.5783850, 0.3205730, 0.3218620, 0.009990000, 0.7943480, 0.7946690, 1.4190570, 1.5774090, 0.009664000, 1.2610220, 0.7975730, 0.9520580, 0.6379280, 1.2629660, 0.7911230, 0.6363170, 0.6353490, 1.2652230,
  0.2190530, 0.3761820, 0.3756650, 0.1250710, 0.3136790, 0.3763110, 0.3447660, 0.3130320, 0.2511090, -0.2197640, -0.1253960, 0.09307600, 0.1250040, -0.09456400, -0.03212500, -0.5026120, -0.1261060, 0.03076700, -0.1261710, -0.03167200, 0.3130960, 0.1558370, 0.1878960, 0.1882190, -0.0004530000, 0.06321200, 0.1252000, 0.3445090, 0.3442510, 0.03070200, 0.09378600, 0.1877660, -0.0002590000, 0.06230900, 0.2812970, 0.06198600, -0.09404800, 0.1252620, -0.0008420000, -0.06308800, -0.1568750, 0.1871850, 0.2184030, 0.1248750, -0.0007130000, -0.1888050, 0.2495580, 0.2812940, 0.1566750, 0.09333200, 0.2812950, -0.09521100, 0.1249390, 8.0342160, 67.1150770, 74.6553350, 85.5828690, 82.9463940, 91.7642880, 85.4245930, 87.6593270, 90.3674050, 91.3466230, 90.2523350, 87.0852480, 81.4066110, 74.2492380, 66.8724240, 60.1533420, 53.935770, 47.4374810, 41.9767910, 36.9255680, 32.59710, 29.2419820, 26.6718640, 24.5713250, 23.5373440, 22.4408540, 21.8149130, 21.3446190, 21.0954410, 21.0957640, 21.7248590, 22.5432060, 23.6133680, 24.5907740, 25.8205150, 26.7698590, 27.9379320, 28.8868880, 29.6783260, 30.8460140, 31.1660040, 31.7669120, 31.7709120, 31.8039410, 30.8309220, 30.2612440, 29.061960, 27.5139140, 24.8962250, 19.8923920, 13.029460, 4.6361920, -1.108610, -1.9966560, -1.8845280, -1.893090, -1.5859140, -1.7119460, -1.9005550, -1.3369270, -1.3374440, -1.2438510, -1.2749420, -1.432330, -0.9618450, -0.9942260, -1.1823840, -1.1508420, -1.2452750, -0.8695460, -0.7444110, -1.1517470, -0.7756950, -0.7768560, -0.9017350, -0.8703880, -0.4315070, -0.6192110, -0.7444110, -0.5247130, -0.7131920, -0.8071720, -0.4626610, -0.9321140, -0.9637840, -0.9630750, -0.8376790, -0.9000540, -0.7428590, -1.0562140, -0.7112520, -1.1821260, -1.119170, -0.9317900, -0.7760160, -0.7765980, -0.8398790, -0.9666950, -0.4349990, -0.1862790, 0.06508800, 0.2204740, 0.2829770, 0.6276810, 0.6901200, 0.6272280, 0.7840350, 0.7525570, 1.0036680, 0.5327950, 0.8464740, 0.9719960, 0.7210800, 0.5646590, 0.7519770, 0.8150620, 0.9718680, 1.1599580, 1.1915660, 0.8774340, 0.6895370, 1.1280930, 0.9716740, 0.9717390, 0.9718670, 1.0344350, 1.0655250, 1.0664940, 0.8149310, 0.9403250, 1.0656550, 1.0973910, 1.1600230, 1.0346280, 1.2540030, 1.1281580, 1.0030210, 1.3483080, 1.1915010, 1.1286750, 0.8782740, 0.8464730, 0.9406480, 0.8778870, 1.066430,
  0.01873200, 0.07531400, -0.1130090, 0.07488800, 0.07550800, 0.1880920, -0.2821740, -0.03812000, -0.03781000, -0.1698620, -0.07585500, -0.05724000, -0.1510140, -0.09481900, -0.05743300, -0.2270250, -0.1512080, 0.1307740, -0.1889420, 0.1309290, -0.07570000, -0.1324370, -0.0003480000, 0.07500500, 0.03688300, 0.1502410, -0.0002700000, -0.05677400, -0.05685200, 0.05573100, 0.01834500, -0.1133570, 0.03700000, 0.03700000, -0.01931200, -0.07589400, -0.1697460, -0.1509360, -0.3016800, -0.2641000, -0.2075960, -0.1137050, -0.3206050, -0.1887090, -0.2266760, -0.3019900, -0.3770710, -0.3205660, -0.1697840, -0.1327070, -0.2074800, -0.3961510, -0.3013700, -2.9659270, -18.4089680, -20.544120, -27.417830, -32.9136040, -41.2386440, -43.3128050, -48.5184940, -50.5442090, -50.9356710, -49.975520, -48.3403770, -45.9931670, -44.4946550, -43.2408160, -42.6077910, -42.3505210, -41.8861190, -41.0624060, -39.8431580, -38.5292040, -37.4961440, -36.6692080, -36.2375720, -36.0305970, -36.4257050, -36.6890320, -37.4220840, -37.6850620, -37.609710, -37.909530, -38.4343610, -39.4479170, -40.5550540, -41.7366510, -43.049640, -44.6069530, -46.1456510, -47.8540190, -49.4488740, -50.4996610, -50.6291520, -50.4016610, -50.0057410, -48.7839670, -47.0934780, -44.4637390, -41.1394990, -36.5002940, -30.1318640, -21.9829270, -13.9634470, -10.2246030, -6.5038240, -3.9506760, -1.9975970, -0.5326610, 0.5577230, 0.4442490, 0.5192540, 0.4437850, 0.4244740, 0.4431280, 0.4240090, 0.5555970, 0.4985500, 0.3101880, 0.4416590, 0.3847670, 0.5722790, 0.2339470, 0.4405760, 0.4404220, 0.3273340, 0.2145570, 0.1955170, 0.2712180, 0.3465310, 0.4591920, 0.4406930, 0.3276060, 0.4593080, 0.2903750, 0.1590970, 0.2156400, 0.2534520, 0.4416980, 0.2541100, 0.2733450, 0.4988980, 0.3674680, 0.2351840, 0.2731890, 0.1973730, 0.1778290, 0.2898710, 0.2511310, 0.1369610, 0.04179500, 0.07747900, 0.1526010, 0.05774300, 0.1323990, 0.03866400, 0.1511320, 0.07554700, 0.1696320, 0.0003500000, 0.1133990, 0.1315100, 0.05685400, 0.01908200, 0.05677700, 0.03777500, 0.0002330000, 0.03816100, 0.09447300, 0.01916000, 0.1135150, -0.1501230, -0.03738500, -0.1501220, -0.09357900, 0.05677700, -0.09346300, -0.09346300, -0.2252040, 0.1134760, -0.1123890, 0.03785200, -0.1121950, -0.05569000, -0.1308100, -0.1311200, -0.1874300, -0.1499290, -0.1877020, 0.01970200, 0.0006990000, -0.03692000, 0.07578000, -0.01845900, -0.1120400, -0.03707500, 0.0008920000,
  0.5354350, 0.5803020, 0.5740220, 0.4391290, 0.7407970, 0.5226310, -0.3631870, -0.3888220, -0.8733360, -1.3483290, -1.6018620, -1.486360, -1.7333850, -1.9419410, -1.829830, -1.8813210, -1.6342960, -1.4705810, -1.303790, -1.2587660, -1.146240, -0.9602510, -0.7998130, -0.7516530, -0.6297150, -0.4757620, -0.5109390, -0.5301520, -0.4563000, -0.4757580, -0.5782630, -0.5045560, -0.7259120, -0.6810030, -0.7932250, -0.8928630, -1.1142460, -1.1109990, -1.3035310, -1.4799930, -1.6116490, -1.5860260, -1.8457940, -1.6952780, -1.8941980, -1.9616090, -1.8558850, -1.7690840, -1.8591320, -1.7917470, -1.6408780, -1.6569860, -1.3905180, -2.8245240, 1.031190, 2.9800910, -2.3095070, -8.1037210, -11.1617180, -14.3167820, -17.6189280, -16.9369350, -15.6283110, -14.0861880, -12.1522460, -10.6683730, -9.8282290, -9.5760950, -9.5201980, -9.4387270, -9.2864850, -8.4659330, -7.3077610, -5.8182280, -4.5915170, -3.4837420, -2.5718680, -1.8240140, -1.3141240, -1.2118460, -1.1133840, -0.4656880, 0.1567740, 0.9203350, 1.9597780, 2.9735950, 4.0101860, 5.1492070, 5.8295720, 6.7182870, 7.4210410, 8.0723010, 8.7207860, 9.340530, 9.8292060, 10.3342130, 10.5985730, 10.702030, 10.60030, 10.2837460, 9.8353670, 9.3658720, 9.220830, 7.484070, 5.2095750, 2.6481460, 2.4675190, 2.0638460, 2.1092540, 2.0448560, 1.8414880, 1.7895240, 1.8213210, 1.6668310, 1.5701830, 1.6276610, 1.342010, 1.4156260, 1.2423570, 1.078240, 1.0008190, 0.8944880, 0.9904190, 0.7850030, 0.8390770, 0.8069870, 0.8516940, 0.8099140, 0.8064100, 0.8034050, 0.9091320, 0.8769550, 0.9635800, 0.8674130, 0.9571740, 1.002240, 1.0375980, 1.169350, 1.2047630, 1.1474120, 1.2662450, 1.2985250, 1.3948410, 1.3851930, 1.1957040, 1.3815030, 1.220760, 1.1817080, 1.2131190, 0.3717820, 0.4187520, 0.3148800, 0.1307990, 0.5598360, 0.8737270, 1.0753230, 1.363850, 1.5015530, 1.6808620, 1.8317160, 1.9374310, 2.1428780, 2.3029910, 2.424930, 2.5724340, 2.8673290, 2.8063990, 3.0276830, 3.095170, 3.2170790, 3.1818710, 3.2685690, 3.1786430, 3.3227980, 3.3743150, 3.3999080, 3.3615270, 3.3935860, 3.3711410, 3.525070, 3.6758180, 3.669370, 3.733580, 3.909970, 3.8940910, 3.9807350, 4.1217720, 4.1603480, 4.2563890, 4.2148260, 4.2276450, 4.1442060, 4.1121430, 3.8362780, 3.6312020, 3.4353630, 2.9958250, 2.938410,
  0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 58.2091940, 56.8482810, 56.5783830, 59.0032330, 64.3402730, 68.63400, 71.5848140, 73.0703160, 72.4342660, 71.8035190, 71.0523330, 70.9151910, 70.7667770, 72.3768480, 74.0891030, 76.5425420, 79.6308010, 82.5105810, 84.6373330, 85.9343830, 86.6490080, 87.1660430, 87.0305480, 87.3702640, 87.4520210, 87.7475780, 87.1710710, 88.0794370, 87.4564670, 87.0794970, 86.3194960, 85.3526520, 84.5577160, 83.5259460, 82.0749860, 80.2229190, 79.1612660, 77.9650820, 77.1184030, 76.4739010, 75.625980, 74.4508890, 73.525260, 72.9613050, 72.2209750, 71.9713010, 71.6010020, 71.6233610, 71.6068310, 71.4759060, 70.9647020, 66.7908190, 63.1904030, 56.9893710, 55.089410, 42.9541170, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
  0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 200.469587000000, 197.991184000000, 192.672920, 187.518684000000, 175.672930, 168.204144000000, 160.508324000000, 153.526735000000, 148.467787000000, 144.908905000000, 142.369121000000, 139.397429000000, 135.295066000000, 130.596644000000, 124.690794000000, 118.550462000000, 112.351104000000, 104.471223000000, 97.3174160, 89.7207090, 82.160120, 75.7348380, 70.0100670, 65.1438360, 62.4997950, 58.8950880, 55.8882380, 54.3752730, 52.6223470, 51.6105310, 51.1055760, 50.5340430, 49.8658740, 48.7017610, 47.9594310, 46.5765520, 45.7405050, 44.3244110, 42.7590670, 41.948660, 40.166590, 39.3027460, 38.0375470, 37.1618820, 35.3601430, 34.828140, 33.9750530, 33.6099990, 32.6727950, 28.4909670, 21.4838690, 2.8967280, -16.3637890, -26.8690710, -43.1186890, -86.9292040, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
  0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0
};

const double fp3dataout_global[1792] = {
  -3.920480, -3.76230200, -4.32339100, -4.48093800, -4.64362200, -3.84268200, 0.8770930, 0.4816220, 4.07983200, 6.80713400, 7.68537300, 7.05274600, 8.24851100, 9.45095900, 8.81129100, 9.45214400, 8.251740, 7.05147200, 6.56858600, 5.60790900, 4.48390900, 4.16613600, 3.44363700, 2.96239800, 2.16326700, 2.15851500, 1.92315200, 1.92173600, 1.683300, 1.68511400, 1.442560, 1.840470, 2.64371900, 2.40425800, 2.48821500, 3.52620100, 4.56185500, 4.80271900, 6.00683900, 6.72355700, 7.84408500, 7.52988600, 8.16866100, 9.048450, 9.04794300, 9.04743600, 9.37047700, 8.80706500, 9.12549400, 8.56723300, 7.85011600, 7.84744500, 6.40488200, 10.1236210, 26.4697530, 42.2805360, 97.0217230, 117.3111750, 103.9875380, 110.6088480, 132.8840780, 133.3018210, 122.2593760, 111.6782750, 98.8166070, 87.7640890, 79.3129730, 71.5030900, 63.2858160, 55.5466740, 49.1572710, 45.4689220, 42.0838450, 38.1185250, 35.5781350, 32.2247150, 29.7479970, 27.6665800, 24.6133580, 18.3601710, 17.3983830, 14.2583400, 7.77272200, -0.2554510, -9.09483900, -18.3546950, -27.6261030, -35.4688260, -40.8456630, -46.9403610, -54.7987280, -63.3723990, -72.7433210, -82.4986610, -92.8716500, -102.104360, -111.475380, -120.888650, -129.3021480, -136.7179030, -140.3267030, -139.7949310, -131.7452950, -106.3923180, -65.2158260, -21.9031120, -12.9410300, -11.3515590, -10.9271220, -7.25157600, -7.63887500, -7.56037600, -7.80020700, -7.23882200, -6.67975100, -6.60550400, -5.87992400, -5.72532300, -5.88118800, -5.16481900, -4.687920, -4.60930400, -4.37084400, -4.77399700, -3.81201600, -4.61603500, -4.44795500, -3.97440600, -4.13668500, -4.29451100, -4.45564100, -3.97607100, -3.97825700, -4.61792400, -4.53498400, -4.69395300, -4.77651700, -5.17148200, -4.93486100, -5.41035300, -5.41190100, -5.73278900, -6.21004500, -5.73420100, -6.05208800, -6.05207800, -5.49300700, -5.25285800, -5.334210, -1.25815700, -1.10012800, -0.06566700, -0.3058030, -3.35826500, -5.59887600, -6.64334900, -8.32598600, -9.36726800, -10.3311140, -11.6926430, -12.1742510, -13.2973500, -14.0936460, -14.8948570, -15.4596680, -16.6572140, -16.9015470, -17.3750830, -18.1771890, -18.6597040, -18.9830100, -19.3025970, -19.8609830, -19.6203570, -19.7008760, -19.7020230, -20.1810840, -20.2638910, -20.2622300, -20.9033100, -21.1476490, -21.3026210, -22.0238300, -22.4231490, -23.0668080, -23.3066590, -23.7892890, -24.5101210, -24.6654730, -24.3493540, -24.5883210, -24.1083640, -23.5464990, -22.9878380, -22.2656090, -20.26300, -18.0997690, -17.4608890,
  -0.9662920, -1.28749900, -0.8873710, -1.69011400, -1.04749200, -1.04726900, -1.92886700, -2.00806800, -1.84594400, -2.32367700, -2.32473200, -2.48262700, -2.48392500, -2.32202200, -2.56322100, -3.04394900, -3.04442500, -2.72422300, -2.88557300, -2.24493400, -1.84584300, -2.00497500, -1.92575500, -2.00682300, -1.84643900, -1.68693200, -1.84598200, -1.84657200, -1.68529700, -1.84559200, -1.92748400, -2.08785500, -2.16696500, -2.08662600, -2.08554700, -2.08570900, -2.56858100, -2.56779300, -2.48541900, -2.48668300, -2.56605500, -2.40377800, -2.48490900, -2.64373200, -2.80562500, -3.04700600, -3.125230, -2.80557500, -3.12759500, -2.80640900, -2.96577800, -3.20772800, -2.80773500, -7.10931200, 21.2193700, 34.2639410, 22.8269150, 2.90001900, -17.6029160, -33.16290, -44.2770480, -37.0216940, -29.0329460, -22.1433100, -13.3935300, -7.83612500, -8.68561900, -12.6681050, -18.4213850, -25.4584090, -30.6511410, -31.9898120, -29.8808540, -24.7278400, -18.9376690, -14.5188310, -10.9038390, -9.05694400, -9.30460800, -12.0471320, -15.3401440, -16.2318490, -17.1224260, -17.9429630, -19.2487630, -19.8409830, -19.7147750, -19.7510160, -19.6310110, -19.5103600, -19.8760840, -21.6056870, -22.1311320, -22.4906680, -21.3180780, -19.4132750, -18.2240400, -18.3863720, -18.8539470, -18.5845910, -18.4534100, -17.0066810, -14.0719110, -14.6186320, -14.6671890, -11.8122120, -9.40687600, -10.3116590, -11.5537010, -11.4399580, -4.934270, -5.49789800, -4.77645700, -4.85721700, -4.93832600, -4.37894800, -4.53816500, -3.97824400, -3.81754400, -4.30120900, -3.98203300, -4.14444800, -3.42260200, -3.18514300, -3.58467200, -3.10623200, -3.26349400, -3.02493500, -3.58827400, -3.02567800, -3.26668500, -3.42697100, -3.18657300, -3.027380, -3.26641900, -2.94476700, -3.74785200, -3.42437600, -3.90625200, -3.74436700, -3.82421700, -3.98492600, -3.983880, -3.58368400, -4.14654200, -4.14594300, -3.90637700, -3.50610300, -3.42761700, -2.547050, -2.30881100, -1.75070400, -1.59412700, -1.923480, -1.44478300, -1.60831300, -1.36981300, -1.21105400, -1.37403200, -1.05468800, -1.456850, -0.9768430, -1.77856600, -1.61897700, -1.701140, -1.94142200, -2.104230, -2.18152500, -1.94220700, -1.78269200, -1.70426200, -1.30274600, -1.86534100, -2.34567500, -1.94415400, -1.78411100, -1.78448500, -1.54482900, -1.78500600, -1.946040, -1.62628500, -2.10610200, -1.86647300, -2.02632800, -1.62731300, -1.78751400, -1.94909100, -2.03034800, -2.18908900, -1.94936600, -1.86904900, -1.86889800, -1.94772900, -1.86876400, -1.46642400, -1.62433100, -1.94346700, -1.62170100,
  0.7958350, 0.01006700, 0.01399000, 0.3299610, 0.01232700, 0.009382000, -2.03713900, -0.6257010, -2.20512500, -1.11044800, -1.89800700, 0.4531580, -1.274610, -0.8065870, -0.4907010, -0.6424890, -0.3312020, 0.1393300, -0.6384060, -0.1700330, -0.9521750, -0.1646360, -0.6355080, -0.9482880, -0.3153470, -1.57238700, -0.3171440, -0.7880090, -0.1604560, 0.4689660, -0.4712420, -1.25508900, -0.6303290, -0.3168030, 0.7778690, -0.006022000, -2.04421500, -1.89019400, -0.9508740, -2.20619900, -2.36651600, -0.3318940, -1.11566100, -1.27638300, -1.58675900, -1.89736100, -0.9617260, -1.74464500, -2.37355600, -1.42973100, -0.4899490, -1.42267300, -1.58068400, -43.3239940, -347.8915780, -401.9290260, -489.8932550, -515.2318670, -585.5310290, -576.6720290, -626.6972310, -666.5269230, -684.8491080, -684.669940, -670.680310, -643.8219310, -608.0061050, -573.5939770, -542.1541360, -512.2832890, -484.7696870, -461.8321060, -442.1985520, -427.1192430, -416.9121770, -411.2514390, -407.3147880, -405.8944550, -408.8484030, -412.5772970, -414.2854830, -419.5978710, -419.8899720, -426.4494160, -436.4545930, -452.0981640, -471.0329210, -493.7365770, -521.6161980, -548.3972270, -576.2661720, -603.3434730, -628.8596620, -649.5106050, -662.4936150, -669.3683010, -670.1299320, -659.9154550, -638.2683710, -605.0306830, -558.4863070, -495.0337260, -409.353040, -296.9099370, -195.3252530, -150.1658460, -103.8370850, -59.9781940, -29.5895120, -7.36156600, -0.4814430, -0.7893130, 0.1465210, 0.7730510, 0.6161980, -0.4806590, 0.9297910, -0.1724870, 1.241100, -0.009744000, -0.4822590, -0.6358250, -0.3262760, -0.9509300, -0.4810980, -1.10796700, 1.40022200, -0.4799670, -1.26115200, -0.3273320, -0.6393490, -0.9532400, -1.42634400, -1.10773400, -0.3249620, 0.1424870, -1.26306200, 0.4603860, -1.10754300, 0.1438830, -0.4826640, -0.9545470, -0.01188800, -1.11308200, -0.6340060, -0.3231050, -0.3236130, 0.4604380, 0.7763570, -0.4859020, 0.1473650, -0.3253190, 0.9344010, -1.25056100, 0.1691370, -0.4525930, -0.2938600, 0.02284000, -0.5978650, -0.4393210, -0.9055320, -1.21949100, -0.1128690, -0.1146380, -1.36598300, -0.1071730, -1.51395500, 0.6795210, 0.3664220, -0.1033930, -1.04288700, -0.5746990, -0.2528680, -0.2520900, -0.2552260, -0.4118480, -0.09776200, -0.7241180, -0.4109800, -0.5641280, -1.507100, -0.2481710, -0.2473980, 0.06598400, -0.7167710, -0.7161060, -1.33871500, -1.49460500, 0.07385700, -1.17884400, -0.7147110, -0.8707680, -0.5583780, -1.18534800, -0.7163710, -0.5679250, -0.5736420, -1.20601600,
  -0.02013500, -0.07661300, 0.1117290, -0.07612600, -0.07743200, -0.1892000, 0.2839130, 0.03989400, 0.04107200, 0.1739250, 0.08090000, 0.06225600, 0.1568890, 0.1010270, 0.06337400, 0.2323810, 0.1563570, -0.1259080, 0.1930090, -0.1268560, 0.07995400, 0.1358300, 0.003267000, -0.07224200, -0.03482200, -0.1485810, 0.002144000, 0.05906100, 0.05889700, -0.05412300, -0.01630100, 0.1153090, -0.03462200, -0.03466900, 0.02235900, 0.07891700, 0.1732430, 0.1547740, 0.3059460, 0.2688450, 0.2126220, 0.1191980, 0.3269970, 0.1944600, 0.2328760, 0.3081100, 0.3835450, 0.3268070, 0.1761210, 0.1387240, 0.2133020, 0.4014230, 0.3061220, 2.98800500, 18.5127940, 20.6536070, 27.5620690, 33.0725660, 41.4216660, 43.4960080, 48.7160500, 50.7438490, 51.1325890, 50.1656430, 48.5191130, 46.1579780, 44.6452800, 43.3788270, 42.7348780, 42.4674010, 41.9921110, 41.1569840, 39.9258740, 38.6001280, 37.5576940, 36.7230250, 36.2850460, 36.0739700, 36.4656520, 36.7276420, 37.4596150, 37.7200710, 37.6426810, 37.9410050, 38.4637370, 39.4756780, 40.5809750, 41.7608010, 43.0730710, 44.6293320, 46.1672350, 47.8747240, 49.4693120, 50.5185740, 50.6474250, 50.4182880, 50.0215580, 48.7978980, 47.1068420, 44.4762390, 41.1510140, 36.5091920, 30.1332770, 21.9791070, 13.9537080, 10.2140900, 6.49250700, 3.94087700, 1.98764900, 0.5234240, -0.5664870, -0.4531460, -0.5273530, -0.4513800, -0.4316020, -0.4504950, -0.4306920, -0.5617670, -0.5042050, -0.3156080, -0.4467740, -0.3896850, -0.5769090, -0.2377070, -0.4451620, -0.4443020, -0.3313640, -0.2186500, -0.1995480, -0.2745370, -0.3504960, -0.4632520, -0.4446850, -0.3315850, -0.4637300, -0.2943950, -0.1639850, -0.2210090, -0.2589360, -0.4467920, -0.2596940, -0.2787830, -0.5051520, -0.3731390, -0.2409890, -0.2795010, -0.2028590, -0.1829390, -0.2950840, -0.2536900, -0.1398770, -0.04352200, -0.07820500, -0.1543290, -0.06025100, -0.1354680, -0.04212600, -0.1549450, -0.08004800, -0.1743760, -0.005491000, -0.1188110, -0.1381990, -0.06344200, -0.02595200, -0.06501400, -0.04606200, -0.008946000, -0.04699400, -0.1034540, -0.02772500, -0.1223130, 0.1411150, 0.02760500, 0.1408750, 0.08399800, -0.06623200, 0.08390300, 0.08407700, 0.2153620, -0.1238080, 0.1016740, -0.04857500, 0.1010940, 0.04469200, 0.1196280, 0.1192750, 0.1758100, 0.1377930, 0.1755010, -0.03139000, -0.01236500, 0.02525700, -0.08693900, 0.007921000, 0.1022930, 0.02866700, -0.008810000,
  -0.2197530, -0.3770290, -0.3762030, -0.1257410, -0.3147270, -0.3772660, -0.3438600, -0.3124830, -0.2499530, 0.2217250, 0.1275250, -0.09112200, -0.1225910, 0.09714900, 0.03451000, 0.5053310, 0.1283950, -0.02913200, 0.1281060, 0.03304100, -0.3115380, -0.1544220, -0.1868930, -0.1873960, 0.001184000, -0.06285600, -0.1245590, -0.3437530, -0.3435880, -0.03019500, -0.09309000, -0.1869520, 0.001110000, -0.06151400, -0.2802710, -0.06074500, 0.09571500, -0.1236290, 0.002957000, 0.06536400, 0.1592260, -0.1850160, -0.2155780, -0.1224490, 0.003449000, 0.1917450, -0.2466300, -0.2785640, -0.1540730, -0.09087500, -0.2789070, 0.09792000, -0.1227150, -8.02592900, -67.0868690, -74.6261480, -85.5360660, -82.8835670, -91.6843320, -85.3373870, -87.5596740, -90.2653710, -91.2456020, -90.1547810, -86.9927330, -81.3197110, -74.1657960, -66.7913130, -60.0733250, -53.8562780, -47.3589340, -41.9005980, -36.8527810, -32.5282850, -29.1763590, -26.6089540, -24.5102510, -23.4775390, -22.3810600, -21.7548290, -21.2834900, -21.0347050, -21.0359280, -21.6655020, -22.4843120, -23.5541260, -24.5310630, -25.7603450, -26.7084450, -27.8751460, -28.8225270, -29.6120550, -30.7780090, -31.0970990, -31.6984120, -31.7034080, -31.73740, -30.7664610, -30.1993530, -29.0038690, -27.4605670, -24.8496940, -19.8558470, -13.0037500, -4.62044100, 1.12159700, 2.00393300, 1.88823900, 1.89362900, 1.58419700, 1.70874500, 1.89759900, 1.33381300, 1.33464400, 1.24120300, 1.27219300, 1.42996800, 0.9591820, 0.9918720, 1.18053500, 1.148880, 1.24353800, 0.8673900, 0.7430520, 1.149990, 0.7739800, 0.7752650, 0.9003760, 0.8690630, 0.4300670, 0.6175170, 0.7425780, 0.5228020, 0.7115810, 0.8052380, 0.4609410, 0.9305580, 0.9619730, 0.9611580, 0.8355350, 0.8980590, 0.7407940, 1.05366700, 0.7089280, 1.18024900, 1.117000, 0.9299430, 0.7742500, 0.7746140, 0.8390100, 0.9659490, 0.4345370, 0.1859910, -0.06603300, -0.2216610, -0.2845350, -0.6294510, -0.6922420, -0.6294540, -0.7866000, -0.7549840, -1.00653300, -0.5358900, -0.8496030, -0.9752490, -0.7247630, -0.5682360, -0.7557710, -0.8190000, -0.9760490, -1.16397500, -1.19584100, -0.8811770, -0.6936410, -1.13208100, -0.9757840, -0.9760410, -0.9759700, -1.038510, -1.06958200, -1.071280, -0.8193500, -0.9450640, -1.07037500, -1.10218100, -1.16480200, -1.03958300, -1.25891600, -1.13325200, -1.00800300, -1.35363600, -1.19669400, -1.13376800, -0.8832020, -0.8509940, -0.9447740, -0.8815810, -1.07011200,
  -0.5350970, -0.5795820, -0.5739200, -0.4387250, -0.7401540, -0.5215420, 0.3626900, 0.3890850, 0.8735200, 1.34748900, 1.60144800, 1.486280, 1.73303600, 1.941500, 1.82959100, 1.87993800, 1.63363300, 1.47103900, 1.30300600, 1.25914800, 1.14637600, 0.9600060, 0.8000410, 0.7521290, 0.6298310, 0.4763300, 0.5110910, 0.5303930, 0.4565410, 0.4759760, 0.5784370, 0.5044160, 0.7260290, 0.6811980, 0.7935080, 0.8926860, 1.11356600, 1.11065400, 1.30253300, 1.479040, 1.61076300, 1.58587700, 1.84500500, 1.69480500, 1.89344200, 1.96037200, 1.85494900, 1.76837400, 1.858760, 1.79141800, 1.64053900, 1.65555900, 1.38967800, 2.82481600, -1.00773400, -2.95420800, 2.32647300, 8.09935100, 11.1410560, 14.2813910, 17.5692470, 16.88400, 15.5753240, 14.0349910, 12.1024660, 10.6192050, 9.77504400, 9.51781200, 9.45560200, 9.36721500, 9.20838300, 8.383720, 7.22324500, 5.73262400, 4.50511800, 3.39685100, 2.48377600, 1.73531400, 1.22276400, 1.11884300, 1.01739100, 0.3685270, -0.2536840, -1.01743700, -2.05757300, -3.07336900, -4.11236200, -5.25371200, -5.937190, -6.82954500, -7.53615200, -8.19201900, -8.84426800, -9.46705200, -9.955400, -10.4596530, -10.7226730, -10.8233400, -10.7167820, -10.3931100, -9.93577300, -9.45434600, -9.29468200, -7.53979600, -5.24951300, -2.68301800, -2.49130800, -2.07913200, -2.118150, -2.04856800, -1.84178600, -1.790430, -1.82127700, -1.66703600, -1.57033500, -1.627790, -1.342400, -1.41499800, -1.24195700, -1.07869300, -1.00080200, -0.8947760, -0.9896230, -0.7851600, -0.8390650, -0.8065070, -0.8515850, -0.8103310, -0.8068510, -0.8030490, -0.9087640, -0.8763740, -0.9627850, -0.8672240, -0.9566700, -1.001860, -1.03823400, -1.16983900, -1.20512700, -1.14700300, -1.26652800, -1.29854900, -1.39451600, -1.38486800, -1.19640200, -1.38199600, -1.22126900, -1.18208600, -1.21313100, -0.3720050, -0.4195070, -0.3152840, -0.1307770, -0.5592510, -0.8732570, -1.074530, -1.36293200, -1.50018800, -1.67982100, -1.830170, -1.93647900, -2.14124100, -2.30188100, -2.42367200, -2.57114300, -2.86622500, -2.80555300, -3.02672500, -3.09400900, -3.21553600, -3.18034100, -3.266690, -3.178020, -3.32203900, -3.37337900, -3.39898100, -3.36010700, -3.39265900, -3.37013500, -3.52445600, -3.67409300, -3.66869800, -3.73225900, -3.90898300, -3.892880, -3.97969100, -4.12088500, -4.15937100, -4.25544600, -4.21416300, -4.22587100, -4.14269100, -4.110830, -3.834910, -3.63018400, -3.43453500, -2.99483200, -2.93705800,



};

const std::array<double,3> fp3rso{{0., 0., -63.}};

const std::array<double,3> fp3sc1{{4.66908, 3.01687, 1.71506}};

const std::array<double,3> fp3sc2{{3.84405, 394.878, 1.08413}};

const std::array<double,3> fp3sc3{{593.901992, 395.98, -0.707185}};

const std::array<double,3> fp3sc4{{594.332993, 2.39287, -0.357709}};

const std::array<double,2> fp3offsets{{120., 200.}};

// COMPARISON FUNCTIONS

void forceplatetest_fill_sample10(ma::instrument::ForcePlate* fp, const double* data)
{
  double rate = 60.0;
  double start = 0.0;
  auto fx = new ma::TimeSequence("FX1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(data   , data+22, fx->data());
  fp->setChannel("Fx", fx);
  auto fy = new ma::TimeSequence("FY1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(data+22, data+44, fy->data());
  fp->setChannel("Fy", fy);
  auto fz = new ma::TimeSequence("FZ1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(data+44, data+66, fz->data());
  fp->setChannel("Fz", fz);
  auto mx = new ma::TimeSequence("MX1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"Nmm");
  std::copy(data+66, data+88, mx->data());
  fp->setChannel("Mx", mx);
  auto my = new ma::TimeSequence("MY1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"Nmm");
  std::copy(data+88, data+110, my->data());
  fp->setChannel("My", my);
  auto mz = new ma::TimeSequence("MZ1",1,sample10_fpsamples,rate,start,ma::TimeSequence::Analog,"Nmm");
  std::copy(data+110, data+132, mz->data());
  fp->setChannel("Mz", mz);
};

void forceplatetest_fill_sample10_type2(ma::instrument::ForcePlate* fp)
{
  forceplatetest_fill_sample10(fp, fp2data);
  TS_ASSERT_EQUALS(fp->channels()->findChildren<ma::TimeSequence*>({},{},false).size(),6ul);
}

void forceplatetest_fill_sample10_type4(ma::instrument::ForcePlate* fp)
{
  forceplatetest_fill_sample10(fp, fp4datain);
  auto fp4cal_ = std::vector<double>(fp4cal,fp4cal+36);
  fp->setCalibrationMatrixData(fp4cal_);
  TS_ASSERT_EQUALS(fp->channels()->findChildren<ma::TimeSequence*>({},{},false).size(),6ul);
};

void forceplatetest_fill_gait1_type5(ma::instrument::ForcePlate* fp)
{
  double rate = 1000.0;
  double start = 0.0;
  auto p1 = new ma::TimeSequence("Pin1",1,gait1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(fp5datain   , fp5datain+17, p1->data());
  fp->setChannel("Fz1", p1);
  auto p2 = new ma::TimeSequence("Pin2",1,gait1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(fp5datain+17, fp5datain+34, p2->data());
  fp->setChannel("Fz2", p2);
  auto p3 = new ma::TimeSequence("Pin3",1,gait1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(fp5datain+34, fp5datain+51, p3->data());
  fp->setChannel("Fz3", p3);
  auto p4 = new ma::TimeSequence("Pin4",1,gait1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(fp5datain+51, fp5datain+68, p4->data());
  fp->setChannel("Fz4", p4);
  auto p5 = new ma::TimeSequence("Pin5",1,gait1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(fp5datain+68, fp5datain+85, p5->data());
  fp->setChannel("Fx12", p5);
  auto p6 = new ma::TimeSequence("Pin6",1,gait1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(fp5datain+85, fp5datain+102, p6->data());
  fp->setChannel("Fx34", p6);
  auto p7 = new ma::TimeSequence("Pin7",1,gait1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(fp5datain+102, fp5datain+119, p7->data());
  fp->setChannel("Fy14", p7);
  auto p8 = new ma::TimeSequence("Pin8",1,gait1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy(fp5datain+119, fp5datain+136, p8->data());
  fp->setChannel("Fy23", p8);
  fp->setGeometry(fp5rso, fp5sc1, fp5sc2, fp5sc3, fp5sc4);
  std::vector<double> fp5cal_(fp5cal, fp5cal+48);
  fp->setCalibrationMatrixData(fp5cal_);
  TS_ASSERT_EQUALS(fp->channels()->findChildren<ma::TimeSequence*>({},{},false).size(),8ul);
};

void forceplatetest_compare_sample10_wrench_at_origin(ma::instrument::ForcePlate* fp, const double* dataref)
{
  auto w = fp->wrench(ma::instrument::Location::Origin,false);
  for (unsigned i = 0 ; i < sample10_fpsamples ; ++i)
  {
    const std::string s = std::to_string(i);
    TSM_ASSERT_DELTA(s, w->data()[i],                      dataref[i],                      1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+  sample10_fpsamples], dataref[i+  sample10_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+2*sample10_fpsamples], dataref[i+2*sample10_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+3*sample10_fpsamples], dataref[i+3*sample10_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+4*sample10_fpsamples], dataref[i+4*sample10_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+5*sample10_fpsamples], dataref[i+5*sample10_fpsamples], 1e-4);
  }
};

void forceplatetest_compare_gait1_wrench_at_origin(ma::instrument::ForcePlate* fp)
{
  auto w = fp->wrench(ma::instrument::Location::Origin,false);
  for (unsigned i = 0 ; i < gait1_fpsamples ; ++i)
  {
    const std::string s = std::to_string(i);
    TSM_ASSERT_DELTA(s, w->data()[i],                          -fp5dataout[i],                   1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+  gait1_fpsamples],        -fp5dataout[i+  gait1_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+2*gait1_fpsamples],        -fp5dataout[i+2*gait1_fpsamples], 5e-4); // All differences are below 1-4 except for the sample #5 and #15.
    TSM_ASSERT_DELTA(s, w->data()[i+3*gait1_fpsamples]/1000.0, -fp5dataout[i+3*gait1_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+4*gait1_fpsamples]/1000.0, -fp5dataout[i+4*gait1_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+5*gait1_fpsamples]/1000.0, -fp5dataout[i+5*gait1_fpsamples], 1e-4);
  }
};

void forceplatetest_compare_gait1_wrench_position_at_cop(ma::instrument::ForcePlate* fp)
{
  auto w = fp->wrench(ma::instrument::Location::CentreOfPressure,false);
  for (unsigned i = 0 ; i < gait1_fpsamples ; ++i)
  {
    const std::string s = std::to_string(i);
    // NOTE: Most of the differences are below 5e-4
    TSM_ASSERT_DELTA(s, w->data()[i+6*gait1_fpsamples], fp5dataout[i+6*gait1_fpsamples], 7.5e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+7*gait1_fpsamples], fp5dataout[i+7*gait1_fpsamples], 7.5e-4);
    // The next line is shifted because the original result were expressed against the surface origin while with OpenMA this is against the hardware origin.
    TSM_ASSERT_DELTA(s, w->data()[i+8*gait1_fpsamples], fp5dataout[i+8*gait1_fpsamples]-16.33887, 7.5e-4);
  }
};

void forceplatetest_compare_fp_clone(ma::instrument::ForcePlate* ref, ma::instrument::ForcePlate* clone)
{
  auto arr1 = ref->referenceFrame();
  auto arr2 = clone->referenceFrame();
  for (int i = 1 ; i < 12 ; ++i)
    TS_ASSERT_DELTA(arr1[i], arr2[i], 1e-5)
  arr1 = ref->surfaceCorners();
  arr2 = clone->surfaceCorners();
  for (int i = 1 ; i < 12 ; ++i)
    TS_ASSERT_DELTA(arr1[i], arr2[i], 1e-5)
  auto arr3 = ref->relativeSurfaceOrigin();
  auto arr4 = clone->relativeSurfaceOrigin();
  for (int i = 1 ; i < 3 ; ++i)
    TS_ASSERT_DELTA(arr3[i], arr4[i], 1e-5)
  auto s1 = ref->calibrationMatrixDimensions()[0] * ref->calibrationMatrixDimensions()[1];
  auto s2 = clone->calibrationMatrixDimensions()[0] * clone->calibrationMatrixDimensions()[1];
  TS_ASSERT_EQUALS(s1,s2);
  auto d1 = ref->calibrationMatrixData();
  auto d2 = clone->calibrationMatrixData();
  for (unsigned i = 1 ; i < s1 ; ++i)
    TS_ASSERT_DELTA(d1[i], d2[i], 1e-5)
};

void forceplatetest_compare_fp2_clone(ma::instrument::ForcePlate* ref, ma::instrument::ForcePlate* clone)
{
  forceplatetest_compare_fp_clone(ref, clone);
  TS_ASSERT_DIFFERS(ref->channels(), clone->channels());
  TS_ASSERT_EQUALS(clone->channel("Fx"), clone->channels()->findChild("FX1"));
  TS_ASSERT_EQUALS(clone->channel("Fy"), clone->channels()->findChild("FY1"));
  TS_ASSERT_EQUALS(clone->channel("Fz"), clone->channels()->findChild("FZ1"));
  TS_ASSERT_EQUALS(clone->channel("Mx"), clone->channels()->findChild("MX1"));
  TS_ASSERT_EQUALS(clone->channel("My"), clone->channels()->findChild("MY1"));
  TS_ASSERT_EQUALS(clone->channel("Mz"), clone->channels()->findChild("MZ1"));
  TS_ASSERT_DIFFERS(clone->channel("Fx"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fy"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fz"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Mx"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("My"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Mz"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("FX1"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("FY1"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("FZ1"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("MX1"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("MY1"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("MZ1"), nullptr);
  TS_ASSERT_DIFFERS(ref->channel("Fx"), clone->channel("Fx"));
  TS_ASSERT_DIFFERS(ref->channel("Fy"), clone->channel("Fy"));
  TS_ASSERT_DIFFERS(ref->channel("Fz"), clone->channel("Fz"));
  TS_ASSERT_DIFFERS(ref->channel("Mx"), clone->channel("Mx"));
  TS_ASSERT_DIFFERS(ref->channel("My"), clone->channel("My"));
  TS_ASSERT_DIFFERS(ref->channel("Mz"), clone->channel("Mz"));
};

void forceplatetest_compare_fp4_clone(ma::instrument::ForcePlate* ref, ma::instrument::ForcePlate* clone)
{
  forceplatetest_compare_fp2_clone(ref, clone);
};

void forceplatetest_compare_fp5_clone(ma::instrument::ForcePlate* ref, ma::instrument::ForcePlate* clone)
{
  forceplatetest_compare_fp_clone(ref, clone);
  TS_ASSERT_DIFFERS(ref->channels(), clone->channels());
  TS_ASSERT_EQUALS(clone->channel("Fz1"), clone->channels()->findChild("Pin1"));
  TS_ASSERT_EQUALS(clone->channel("Fz2"), clone->channels()->findChild("Pin2"));
  TS_ASSERT_EQUALS(clone->channel("Fz3"), clone->channels()->findChild("Pin3"));
  TS_ASSERT_EQUALS(clone->channel("Fz4"), clone->channels()->findChild("Pin4"));
  TS_ASSERT_EQUALS(clone->channel("Fx12"), clone->channels()->findChild("Pin5"));
  TS_ASSERT_EQUALS(clone->channel("Fx34"), clone->channels()->findChild("Pin6"));
  TS_ASSERT_EQUALS(clone->channel("Fy14"), clone->channels()->findChild("Pin7"));
  TS_ASSERT_EQUALS(clone->channel("Fy23"), clone->channels()->findChild("Pin8"));
  TS_ASSERT_DIFFERS(clone->channel("Fz1"),  nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fz2"),  nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fz3"),  nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fz4"),  nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fx12"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fx34"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fy14"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fy23"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Pin1"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Pin2"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Pin3"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Pin4"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Pin5"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Pin6"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Pin7"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Pin8"), nullptr);
  TS_ASSERT_DIFFERS(ref->channel("Fz1"), clone->channel("Fz1"));
  TS_ASSERT_DIFFERS(ref->channel("Fz2"), clone->channel("Fz2"));
  TS_ASSERT_DIFFERS(ref->channel("Fz3"), clone->channel("Fz3"));
  TS_ASSERT_DIFFERS(ref->channel("Fz4"), clone->channel("Fz4"));
  TS_ASSERT_DIFFERS(ref->channel("Fx12"), clone->channel("Fx12"));
  TS_ASSERT_DIFFERS(ref->channel("Fx34"), clone->channel("Fx34"));
  TS_ASSERT_DIFFERS(ref->channel("Fy14"), clone->channel("Fy14"));
  TS_ASSERT_DIFFERS(ref->channel("Fy23"), clone->channel("Fy23"));
};

void forceplatetest_fill_gaitfb1_type3(ma::instrument::ForcePlateType3* fp)
{
  double rate = 100.0;
  double start = 0.0;
  auto p1 = new ma::TimeSequence("Channel_01",1,gaitfb1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy_n(fp3datain,        gaitfb1_fpsamples, p1->data());
  fp->setChannel("Fx12", p1);
  auto p2 = new ma::TimeSequence("Channel_02",1,gaitfb1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy_n(fp3datain+gaitfb1_fpsamples, gaitfb1_fpsamples, p2->data());
  fp->setChannel("Fx34", p2);
  auto p3 = new ma::TimeSequence("Channel_03",1,gaitfb1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy_n(fp3datain+2*gaitfb1_fpsamples, gaitfb1_fpsamples, p3->data());
  fp->setChannel("Fy14", p3);
  auto p4 = new ma::TimeSequence("Channel_04",1,gaitfb1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy_n(fp3datain+3*gaitfb1_fpsamples, gaitfb1_fpsamples, p4->data());
  fp->setChannel("Fy23", p4);
  auto p5 = new ma::TimeSequence("Channel_05",1,gaitfb1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy_n(fp3datain+4*gaitfb1_fpsamples, gaitfb1_fpsamples, p5->data());
  fp->setChannel("Fz1", p5);
  auto p6 = new ma::TimeSequence("Channel_06",1,gaitfb1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy_n(fp3datain+5*gaitfb1_fpsamples, gaitfb1_fpsamples, p6->data());
  fp->setChannel("Fz2", p6);
  auto p7 = new ma::TimeSequence("Channel_07",1,gaitfb1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy_n(fp3datain+6*gaitfb1_fpsamples, gaitfb1_fpsamples, p7->data());
  fp->setChannel("Fz3", p7);
  auto p8 = new ma::TimeSequence("Channel_08",1,gaitfb1_fpsamples,rate,start,ma::TimeSequence::Analog,"N");
  std::copy_n(fp3datain+7*gaitfb1_fpsamples, gaitfb1_fpsamples, p8->data());
  fp->setChannel("Fz4", p8);
  fp->setGeometry(fp3rso, fp3sc1, fp3sc2, fp3sc3, fp3sc4);
  fp->setSensorOffsets(fp3offsets);
  TS_ASSERT_EQUALS(fp->channels()->findChildren<ma::TimeSequence*>({},{},false).size(),8ul);
};

void forceplatetest_compare_gaitfb1_type3_wrench_local(ma::instrument::ForcePlate* fp)
{
  auto w = fp->wrench(ma::instrument::Location::Origin, false, 0.0);
  // NOTE: The indices differs between datain and dataout
  for (unsigned i = 1 ; i < gaitfb1_fpsamples-1 ; ++i)
  {
    unsigned j = i-1;
    const std::string s = std::to_string(i);
    TSM_ASSERT_DELTA(s, w->data()[i],                            -fp3dataout_local[j],                     1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+  gaitfb1_fpsamples],        -fp3dataout_local[j+  gaitfb1_fpsamples], 1e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+2*gaitfb1_fpsamples],        -fp3dataout_local[j+2*gaitfb1_fpsamples], 1e-3);
    TSM_ASSERT_DELTA(s, w->data()[i+3*gaitfb1_fpsamples]/1000.0, -fp3dataout_local[j+3*gaitfb1_fpsamples], 5e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+4*gaitfb1_fpsamples]/1000.0, -fp3dataout_local[j+4*gaitfb1_fpsamples], 5e-4);
    TSM_ASSERT_DELTA(s, w->data()[i+5*gaitfb1_fpsamples]/1000.0, -fp3dataout_local[j+5*gaitfb1_fpsamples], 5e-4);
  }
  w = fp->wrench(ma::instrument::Location::CentreOfPressure, false);
  for (unsigned i = 1 ; i < gaitfb1_fpsamples-1 ; ++i)
  {
    unsigned j = i-1;
    const std::string s = std::to_string(i);
    TSM_ASSERT_DELTA(s, w->data()[i+6*gaitfb1_fpsamples]       , fp3dataout_local[j+6*gaitfb1_fpsamples], 1e-3);
    TSM_ASSERT_DELTA(s, w->data()[i+7*gaitfb1_fpsamples]       , fp3dataout_local[j+7*gaitfb1_fpsamples], 1e-3);
    // The next line is shifted because the original result were expressed against the surface origin while with OpenMA this is against the hardware origin.
    TSM_ASSERT_DELTA(s, w->data()[i+8*gaitfb1_fpsamples]       , fp3dataout_local[j+8*gaitfb1_fpsamples]+fp3rso[2], 1e-3);
  }
};

void forceplatetest_compare_gaitfb1_type3_wrench_global(ma::instrument::ForcePlate* fp)
{
  auto w = fp->wrench(ma::instrument::Location::Origin, true, 0.0);
  // NOTE: The indices differs between datain and dataout
  for (unsigned i = 1 ; i < gaitfb1_fpsamples-1 ; ++i)
  {
    unsigned j = i-1;
    const std::string s = std::to_string(i);
    TSM_ASSERT_DELTA(s, w->data()[i],                            -fp3dataout_global[j],                     30e-2);
    TSM_ASSERT_DELTA(s, w->data()[i+  gaitfb1_fpsamples],        -fp3dataout_global[j+  gaitfb1_fpsamples], 31e-2);
    TSM_ASSERT_DELTA(s, w->data()[i+2*gaitfb1_fpsamples],        -fp3dataout_global[j+2*gaitfb1_fpsamples], 30e-2);
    TSM_ASSERT_DELTA(s, w->data()[i+3*gaitfb1_fpsamples]/1000.0, -fp3dataout_global[j+3*gaitfb1_fpsamples], 30e-2);
    TSM_ASSERT_DELTA(s, w->data()[i+4*gaitfb1_fpsamples]/1000.0, -fp3dataout_global[j+4*gaitfb1_fpsamples], 30e-2);
    TSM_ASSERT_DELTA(s, w->data()[i+5*gaitfb1_fpsamples]/1000.0, -fp3dataout_global[j+5*gaitfb1_fpsamples], 30e-2);
  }
  w = fp->wrench(ma::instrument::Location::CentreOfPressure, true);
  for (unsigned i = 1 ; i < gaitfb1_fpsamples-1 ; ++i)
  {
    unsigned j = i-1;
    const std::string s = std::to_string(i);
    TSM_ASSERT_DELTA(s, w->data()[i+6*gaitfb1_fpsamples]       , fp3dataout_global[j+6*gaitfb1_fpsamples], 1e-1);
    // Only the sample #54 have more than 1e-1mm of difference with the reference data.
    TSM_ASSERT_DELTA(s, w->data()[i+7*gaitfb1_fpsamples]       , fp3dataout_global[j+7*gaitfb1_fpsamples], 1.1e-1);
    TSM_ASSERT_DELTA(s, w->data()[i+8*gaitfb1_fpsamples]       , fp3dataout_global[j+8*gaitfb1_fpsamples], 1e-1);
  }
};

void forceplatetest_compare_fp3_clone(ma::instrument::ForcePlate* ref, ma::instrument::ForcePlate* clone)
{
  auto ref_ = static_cast<ma::instrument::ForcePlateType3*>(ref);
  auto clone_ = static_cast<ma::instrument::ForcePlateType3*>(clone);
  forceplatetest_compare_fp_clone(ref, clone);
  TS_ASSERT_DELTA(ref_->sensorOffsets()[0],clone_->sensorOffsets()[0], 1e-15);
  TS_ASSERT_DELTA(ref_->sensorOffsets()[1],clone_->sensorOffsets()[1], 1e-15);
  TS_ASSERT_DIFFERS(ref->channels(), clone->channels());
  TS_ASSERT_EQUALS(clone->channel("Fz1"), clone->channels()->findChild("Channel_05"));
  TS_ASSERT_EQUALS(clone->channel("Fz2"), clone->channels()->findChild("Channel_06"));
  TS_ASSERT_EQUALS(clone->channel("Fz3"), clone->channels()->findChild("Channel_07"));
  TS_ASSERT_EQUALS(clone->channel("Fz4"), clone->channels()->findChild("Channel_08"));
  TS_ASSERT_EQUALS(clone->channel("Fx12"), clone->channels()->findChild("Channel_01"));
  TS_ASSERT_EQUALS(clone->channel("Fx34"), clone->channels()->findChild("Channel_02"));
  TS_ASSERT_EQUALS(clone->channel("Fy14"), clone->channels()->findChild("Channel_03"));
  TS_ASSERT_EQUALS(clone->channel("Fy23"), clone->channels()->findChild("Channel_04"));
  TS_ASSERT_DIFFERS(clone->channel("Fz1"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fz2"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fz3"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fz4"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fx12"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fx34"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fy14"), nullptr);
  TS_ASSERT_DIFFERS(clone->channel("Fy23"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Channel_05"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Channel_06"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Channel_07"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Channel_08"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Channel_01"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Channel_02"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Channel_03"), nullptr);
  TS_ASSERT_DIFFERS(clone->channels()->findChild("Channel_04"), nullptr);
  TS_ASSERT_DIFFERS(ref->channel("Fz1"), clone->channel("Fz1"));
  TS_ASSERT_DIFFERS(ref->channel("Fz2"), clone->channel("Fz2"));
  TS_ASSERT_DIFFERS(ref->channel("Fz3"), clone->channel("Fz3"));
  TS_ASSERT_DIFFERS(ref->channel("Fz4"), clone->channel("Fz4"));
  TS_ASSERT_DIFFERS(ref->channel("Fx12"), clone->channel("Fx12"));
  TS_ASSERT_DIFFERS(ref->channel("Fx34"), clone->channel("Fx34"));
  TS_ASSERT_DIFFERS(ref->channel("Fy14"), clone->channel("Fy14"));
  TS_ASSERT_DIFFERS(ref->channel("Fy23"), clone->channel("Fy23"));
};

#endif // forceplateTest_def_h