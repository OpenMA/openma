#include <cxxtest/TestDrive.h>

#include <openma/io.h>
#include <openma/base/node.h>
#include <openma/base/timesequence.h>
#include <openma/instrument/forceplate.h>

#include "test_file_path.h"

CXXTEST_SUITE(BSFReaderTest)
{
  CXXTEST_TEST(capability)
  {
    ma::io::HandlerReader reader(nullptr,"amti.bsf");
    TS_ASSERT_EQUALS(reader.canRead(), false);
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Trial01868.bsf"), ma::io::Mode::In);
    reader.setDevice(&file);
    TS_ASSERT_EQUALS(reader.canRead(), true);
    TS_ASSERT_EQUALS(reader.format(), "amti.bsf");
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::None);
  };
  
  CXXTEST_TEST(supportedTrialFormats)
  {
    ma::io::HandlerReader reader;
    auto formats = reader.availableFormats();
    TS_ASSERT_EQUALS(std::find(formats.cbegin(), formats.cend(), "amti.bsf") != formats.cend(), true);
  };
  
  CXXTEST_TEST(detectNoDevice)
  {
    ma::io::HandlerReader reader;
    TS_ASSERT_EQUALS(reader.canRead(), false);
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::Device);
  };
  
  CXXTEST_TEST(detectDeviceNotOpen)
  {
    ma::io::File file;
    ma::io::HandlerReader reader(&file);
    TS_ASSERT_EQUALS(reader.canRead(), false);
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::Device);
  };

  CXXTEST_TEST(detectEmptyFile)
  {
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Empty.bsf"), ma::io::Mode::In);
    ma::io::HandlerReader reader(&file);
    TS_ASSERT_EQUALS(reader.canRead(), false);
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::InvalidData);
  };

  CXXTEST_TEST(detectFail)
  {
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Fail.bsf"), ma::io::Mode::In);
    ma::io::HandlerReader reader(&file);
    TS_ASSERT_EQUALS(reader.canRead(), false);
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::Device);
  };

  CXXTEST_TEST(detectOk)
  {
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Trial01868.bsf"), ma::io::Mode::In);
    ma::io::HandlerReader reader(&file);
    TS_ASSERT_EQUALS(reader.canRead(), true);
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::None);
  };
  
  CXXTEST_TEST(queryOkOne)
  {
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Trial01868.bsf"), ma::io::Mode::In);
    ma::io::HandlerReader reader(&file, "amti.bsf");
    TS_ASSERT_EQUALS(reader.canRead(), true);
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::None);
  };
  
  CXXTEST_TEST(queryOkTwo)
  {
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Trial01868.bsf"), ma::io::Mode::In);
    ma::io::HandlerReader reader(nullptr, "amti.bsf");
    reader.setDevice(&file);
    TS_ASSERT_EQUALS(reader.canRead(), true);
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::None);
  };
  
  CXXTEST_TEST(queryOkThree)
  {
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Trial01868.bsf"), ma::io::Mode::In);
    ma::io::HandlerReader reader;
    reader.setDevice(&file);
    reader.setFormat("amti.bsf");
    TS_ASSERT_EQUALS(reader.canRead(), true);
    TS_ASSERT_EQUALS(reader.errorCode(), ma::io::Error::None);
  };
  
  CXXTEST_TEST(fileTrial01868)
  {
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Trial01868.bsf"), ma::io::Mode::In);
    ma::io::HandlerReader reader(&file, "amti.bsf");
    ma::Node root("root");
    TS_ASSERT_EQUALS(reader.read(&root), true);
    TS_ASSERT_EQUALS(root.children().size(), 1u);
    auto analogs = root.findChildren<ma::TimeSequence*>();
    TS_ASSERT_EQUALS(analogs.size(), 6u);
    for (auto analog : analogs)
    {
      TS_ASSERT_EQUALS(analog->startTime(), 0.0);
      TS_ASSERT_EQUALS(analog->sampleRate(), 200.0);
      TS_ASSERT_EQUALS(analog->components(), 1u);
      TS_ASSERT_EQUALS(analog->samples(), 400u);
    }
    TS_ASSERT_EQUALS(analogs[0]->name(), "Fx");
    TS_ASSERT_EQUALS(analogs[0]->unit(), "N");
    TS_ASSERT_EQUALS(analogs[1]->name(), "Fy");
    TS_ASSERT_EQUALS(analogs[1]->unit(), "N");
    TS_ASSERT_EQUALS(analogs[2]->name(), "Fz");
    TS_ASSERT_EQUALS(analogs[2]->unit(), "N");
    TS_ASSERT_EQUALS(analogs[3]->name(), "Mx");
    TS_ASSERT_EQUALS(analogs[3]->unit(), "Nm");
    TS_ASSERT_EQUALS(analogs[4]->name(), "My");
    TS_ASSERT_EQUALS(analogs[4]->unit(), "Nm");
    TS_ASSERT_EQUALS(analogs[5]->name(), "Mz");
    TS_ASSERT_EQUALS(analogs[5]->unit(), "Nm");
    double* data = 0;
    data = analogs[0]->data();
    TS_ASSERT_DELTA(data[0], 0.123, 5e-4);
    TS_ASSERT_DELTA(data[1], 0.736, 5e-4);
    TS_ASSERT_DELTA(data[2], 0.491, 5e-4);
    TS_ASSERT_DELTA(data[399], 0.0, 5e-4);
    data = analogs[1]->data();
    TS_ASSERT_DELTA(data[0], -0.260, 5e-4);
    data = analogs[2]->data();
    TS_ASSERT_DELTA(data[0], 0.0, 5e-4);
    data = analogs[3]->data();
    TS_ASSERT_DELTA(data[0], 0.0, 5e-4);
    data = analogs[4]->data();
    TS_ASSERT_DELTA(data[0], 0.0, 5e-4);
    data = analogs[5]->data();
    TS_ASSERT_DELTA(data[0], -0.032, 5e-4);
    TS_ASSERT_DELTA(data[399], -0.446, 5e-4);
    auto forplates = root.findChildren<ma::instrument::ForcePlate*>();
    TS_ASSERT_EQUALS(forplates.size(), 1u);
    TS_ASSERT_EQUALS(forplates[0]->channels()->children().size(), 6u);
    TS_ASSERT_EQUALS(forplates[0]->type(), 2);
    const double fpDims[3] = {0.49784, 0.49784, 0.0}; // Dimensions in meters
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[0], fpDims[0]/2., 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[1], -fpDims[1]/2., 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[2], 0.0f, 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[3], -fpDims[0]/2., 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[4], -fpDims[1]/2., 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[5], 0.0f, 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[6], -fpDims[0]/2., 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[7], fpDims[1]/2., 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[8], 0.0f, 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[9], fpDims[0]/2., 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[10], fpDims[1]/2., 1e-5);
    TS_ASSERT_DELTA(forplates[0]->surfaceCorners()[11], 0.0f, 1e-5);
    TS_ASSERT_DELTA(forplates[0]->relativeSurfaceOrigin()[0], 0.0f, 1e-5);
    TS_ASSERT_DELTA(forplates[0]->relativeSurfaceOrigin()[1], 0.0f, 1e-5);
    TS_ASSERT_DELTA(forplates[0]->relativeSurfaceOrigin()[2], -fpDims[2]/2., 1e-5);
  };
  
  CXXTEST_TEST(fileTrial03361)
  {
    ma::io::File file;
    file.open(OPENMA_TDD_PATH_IN("bsf/Trial03361.bsf"), ma::io::Mode::In);
    ma::io::HandlerReader reader(&file, "amti.bsf");
    ma::Node root("root");
    TS_ASSERT_EQUALS(reader.read(&root), true);
    TS_ASSERT_EQUALS(root.children().size(), 1u);
    auto analogs = root.findChildren<ma::TimeSequence*>();
    TS_ASSERT_EQUALS(analogs.size(), 6u);
    for (auto analog : analogs)
    {
      TS_ASSERT_EQUALS(analog->startTime(), 0.0);
      TS_ASSERT_EQUALS(analog->sampleRate(), 200.0);
      TS_ASSERT_EQUALS(analog->components(), 1u);
      TS_ASSERT_EQUALS(analog->samples(), 400u);
    }
    TS_ASSERT_EQUALS(analogs[0]->name(), "Fx");
    TS_ASSERT_EQUALS(analogs[0]->unit(), "N");
    TS_ASSERT_EQUALS(analogs[1]->name(), "Fy");
    TS_ASSERT_EQUALS(analogs[1]->unit(), "N");
    TS_ASSERT_EQUALS(analogs[2]->name(), "Fz");
    TS_ASSERT_EQUALS(analogs[2]->unit(), "N");
    TS_ASSERT_EQUALS(analogs[3]->name(), "Mx");
    TS_ASSERT_EQUALS(analogs[3]->unit(), "Nm");
    TS_ASSERT_EQUALS(analogs[4]->name(), "My");
    TS_ASSERT_EQUALS(analogs[4]->unit(), "Nm");
    TS_ASSERT_EQUALS(analogs[5]->name(), "Mz");
    TS_ASSERT_EQUALS(analogs[5]->unit(), "Nm");
    double* data = 0;
    data = analogs[0]->data();
    TS_ASSERT_DELTA(data[0], 0.9818, 5e-4);
    TS_ASSERT_DELTA(data[1], 1.35, 5e-4);
    TS_ASSERT_DELTA(data[2], 0.3682, 5e-4);
    TS_ASSERT_DELTA(data[399], 0.1227, 5e-4);
    data = analogs[1]->data();
    TS_ASSERT_DELTA(data[0],0.3907, 5e-4);
    data = analogs[2]->data();
    TS_ASSERT_DELTA(data[0], -0.5397, 5e-4);
    data = analogs[3]->data();
    TS_ASSERT_DELTA(data[0], 0.0, 5e-4);
    data = analogs[4]->data();
    TS_ASSERT_DELTA(data[0], 0.0, 5e-4);
    data = analogs[5]->data();
    TS_ASSERT_DELTA(data[0], 0.0319, 5e-4);
    TS_ASSERT_DELTA(data[399], -0.0319, 5e-4);
    auto forplates = root.findChildren<ma::instrument::ForcePlate*>();
    TS_ASSERT_EQUALS(forplates.size(), 1u);
    TS_ASSERT_EQUALS(forplates[0]->channels()->children().size(), 6u);
    TS_ASSERT_EQUALS(forplates[0]->type(), 2);
    auto wrench = forplates[0]->wrench(ma::instrument::Location::PointOfApplication, true, 0.0);
    double fref[1200] = {
      0.981825677735640, 1.35001030688651, 0.368184629150865, 0.490912838867820, -0.490912838867820, 0., 0., 0.245456419433910, -1.10455388745260, 0.245456419433910, -0.245456419433910, 1.10455388745260, 0.613641048584775, -0.368184629150865, -0.122728209716955, 0., 0.490912838867820, 0., -1.10455388745260, -7.97733363160208, -15.8319390534872, -26.6320215085792, -22.3365341684858, -10.3091696162242, 4.66367196924429, 19.6365135547128, 29.0865857029183, 35.1002679790491, 35.1002679790491, 34.1184423013135, 33.8729858818796, 34.2411705110305, 35.7139090276339, 35.8366372373509, 35.5911808179170, 37.6775603831052, 39.5184835288595, 41.1139502551799, 40.8684938357460, 40.8684938357460, 39.7639399482934, 38.2912014316900, 37.0639193345204, 35.4684526082000, 35.7139090276339, 32.4002473652761, 32.0320627361253, 30.4365960098049, 29.5774985417862, 29.9456831709370, 29.3320421223523, 28.2274882348997, 29.3320421223523, 30.0684113806540, 31.5411498972574, 33.3820730430118, 34.2411705110305, 36.5730064956526, 37.0639193345204, 39.5184835288595, 40.5003092065952, 42.5866887717834, 44.6730683369716, 44.6730683369716, 46.2685350632921, 47.8640017896125, 48.1094582090464, 49.5821967256498, 50.8094788228194, 51.6685762908381, 52.2822173394229, 53.0185865977246, 54.2458686948941, 54.4913251143280, 56.2095200503654, 56.9458893086671, 57.1913457281011, 56.7004328892332, 57.5595303572519, 57.6822585669689, 57.0686175183841, 56.0867918406485, 55.4731507920637, 54.7367815337620, 52.7731301782907, 52.6504019685737, 51.4231198714042, 49.2140120964990, 48.4776428381972, 47.2503607410277, 44.4276119175377, 45.0412529661225, 43.8139708689530, 41.7275913037647, 39.8866681580104, 38.6593860608408, 37.0639193345204, 36.4502782859356, 34.1184423013135, 31.4184216875405, 30.8047806389557, 31.4184216875405, 28.4729446543336, 28.7184010737675, 27.7365753960318, 26.2638368794284, 25.8956522502775, 24.7910983628249, 22.9501752170706, 21.9683495393350, 22.9501752170706, 21.8456213296180, 20.2501546032976, 20.0046981838637, 18.0410468283924, 18.1637750381093, 17.3046775700907, 15.9546672632042, 14.2364723271668, 13.1319184397142, 12.0273645522616, 11.0455388745260, 8.95915930933772, 7.60914900245121, 5.76822585669689, 5.03185659839516, 2.45456419433910, 1.22728209716955, 0., -2.08637956518824, -3.80457450122561, -6.75005153443253, -7.48642079273426, -9.08188751905467, -10.8000824550920, -13.6228312785820, -15.4637544243363, -16.8137647312228, -19.0228725061280, -20.7410674421654, -22.8274470073536, -24.5456419433910, -26.6320215085792, -29.2093139126353, -30.6820524292388, -32.7684319944270, -35.3457243984831, -37.6775603831052, -39.7639399482934, -42.2185041426325, -42.9548734009343, -47.0049043215938, -49.0912838867820, -51.4231198714042, -53.3867712268754, -57.0686175183841, -59.6459099224402, -60.6277356001758, -63.6959408430997, -65.4141357791370, -69.2187102803626, -70.2005359580983, -72.1641873135696, -74.7414797176256, -76.8278592828139, -77.4415003313986, -77.5642285411156, -78.6687824285682, -80.1415209451717, -79.6506081063038, -79.8960645257377, -81.7369876714921, -79.1596952674360, -79.2824234771530, -77.9324131702665, -78.3005977994173, -76.9505874925308, -77.3187721216817, -74.7414797176256, -74.1278386690408, -71.9187308941357, -69.8323513289474, -69.3414384900796, -67.2550589248914, -66.8868742957405, -64.6777665208353, -63.0822997945149, -62.4686587459301, -59.6459099224402, -59.0322688738554, -56.9458893086671, -55.2276943726298, -54.3685969046111, -51.4231198714042, -49.3367403062159, -46.6367196924429, -41.9730477231986, -35.9593654470678, -30.0684113806540, -25.1592829919758, -19.7592417644298, -15.2182980049024, -10.9228106648090, -8.83643109962076, -5.40004122754602, -1.35001030688651, 0.981825677735640, 3.19093345264083, 4.78640017896125, 7.11823616358339, 6.01368227613080, 4.66367196924429, 2.20910777490519, 0.122728209716955, -0.368184629150865, -1.22728209716955, -0.368184629150865, 0.122728209716955, 0.859097468018685, 0., -0.122728209716955, 0.122728209716955, 0.368184629150865, -0.122728209716955, -0.736369258301730, -0.122728209716955, -0.122728209716955, -0.981825677735640, 0.613641048584775, -0.613641048584775, -0.981825677735640, -0.122728209716955, -0.736369258301730, -0.368184629150865, -0.245456419433910, -0.245456419433910, 1.22728209716955, -0.736369258301730, -0.490912838867820, 0., 0., 0., -0.122728209716955, 0.368184629150865, 0., 0.736369258301730, 0.613641048584775, 0., -0.122728209716955, 0.613641048584775, 0., -0.613641048584775, 0.122728209716955, 0., 0., 0.736369258301730, 0., -0.122728209716955, 0., 0., 0., -0.368184629150865, 0.245456419433910, 0., 0.122728209716955, 0.245456419433910, 0.245456419433910, 0.368184629150865, -0.122728209716955, 0.368184629150865, 0.245456419433910, 0., 0.245456419433910, 1.47273851660346, -0.490912838867820, 0.245456419433910, -0.490912838867820, -0.245456419433910, -0.490912838867820, -0.490912838867820, -0.368184629150865, 0.368184629150865, -0.245456419433910, 0.490912838867820, 0.122728209716955, 1.10455388745260, 0.613641048584775, -0.368184629150865, -0.368184629150865, -0.613641048584775, -0.245456419433910, -1.22728209716955, -0.613641048584775, -0.490912838867820, -0.859097468018685, -0.859097468018685, -0.122728209716955, 0.490912838867820, 0.368184629150865, -0.368184629150865, 0.368184629150865, 0., -0.245456419433910, -0.736369258301730, 0.122728209716955, -0.245456419433910, -0.245456419433910, -0.981825677735640, 0.245456419433910, 0.368184629150865, 0.122728209716955, -0.368184629150865, -0.490912838867820, -0.245456419433910, 0.613641048584775, 0.736369258301730, -0.122728209716955, -0.490912838867820, -0.122728209716955, 0.736369258301730, 0.245456419433910, -0.859097468018685, 0., 0.859097468018685, 0.490912838867820, 0.736369258301730, -0.245456419433910, 0.859097468018685, -0.490912838867820, 0.613641048584775, 0.736369258301730, -0.368184629150865, 0.613641048584775, 0., 0.736369258301730, 0.490912838867820, -0.736369258301730, 0.736369258301730, -0.859097468018685, 0., -0.490912838867820, -0.122728209716955, 0.368184629150865, 0.736369258301730, -0.490912838867820, -0.245456419433910, 0.245456419433910, -0.859097468018685, -0.613641048584775, 0.368184629150865, 0., -1.22728209716955, 0.245456419433910, -0.122728209716955, 0., -0.490912838867820, 0.368184629150865, 0.368184629150865, 0., 0.490912838867820, 0.368184629150865, 0.368184629150865, 0., 0.613641048584775, 0.859097468018685, 0., 0.368184629150865, 0.490912838867820, -0.981825677735640, -0.245456419433910, 0., 1.47273851660346, -0.490912838867820, 0.245456419433910, 0.122728209716955, -0.245456419433910, 0.613641048584775, 0.981825677735640, 0.981825677735640, 0.981825677735640, 0.245456419433910, 0.368184629150865, -0.859097468018685, -0.122728209716955, 0.981825677735640, 0.981825677735640, 0.122728209716955, 0.613641048584775, 1.22728209716955, 0.245456419433910, -0.122728209716955, 0., 1.47273851660346, 0., 0.368184629150865, 0.613641048584775, 0.245456419433910, 0.859097468018685, -0.368184629150865, 0.122728209716955,
      -0.390694419044956, 0.520925892059941, -0.781388838089912, 0.260462946029971, -0.260462946029971, 0.781388838089912, 0.651157365074927, 0.781388838089912, 0.260462946029971, -0.130231473014985, 0.911620311104898, 0., 1.04185178411988, -0.130231473014985, 0.260462946029971, -0.781388838089912, -0.260462946029971, -0.130231473014985, -1.43254620316484, -3.12555535235965, -7.16273101582420, -13.9347676126034, -20.9672671554126, -26.0462946029971, -25.6556001839521, -20.9672671554126, -16.0184711808432, -11.9812955173787, -7.16273101582420, 0., 0.651157365074927, 3.12555535235965, 4.81856450155446, 9.76736047612390, 12.3719899364236, 16.7998600189331, 21.3579615744576, 24.8742113458622, 26.9579149141020, 28.5206925902818, 28.6509240632968, 29.3020814283717, 29.6927758474167, 29.0416184823417, 27.4788408061619, 26.6974519680720, 25.7858316569671, 25.6556001839521, 25.2649057649072, 24.4835169268173, 22.5300448315925, 23.3114336696824, 23.7021280887273, 23.4416651426974, 25.3951372379221, 25.2649057649072, 27.7393037521919, 28.5206925902818, 30.4741646855066, 31.7764794156564, 33.2090256188213, 36.2043494981659, 36.3345809711809, 37.5066642283158, 38.4182845394207, 39.1996733775106, 39.8508307425855, 39.8508307425855, 41.5438398917803, 42.5856916759002, 44.4089322981100, 43.2368490409751, 45.0600896631849, 44.6693952441400, 47.2740247044397, 46.8833302853947, 47.6647191234846, 48.3158764885596, 48.4461079615746, 48.9670338536345, 48.4461079615746, 48.1856450155446, 48.4461079615746, 47.4042561774547, 46.2321729203198, 45.0600896631849, 44.6693952441400, 43.3670805139901, 42.0647657838403, 41.2833769457504, 41.2833769457504, 40.2415251616305, 38.5485160124357, 38.5485160124357, 39.3299048505256, 38.8089789584656, 38.0275901203757, 37.3764327553008, 36.0741180251509, 35.2927291870610, 35.4229606600760, 35.0322662410311, 33.9904144569112, 33.0787941458063, 32.6880997267613, 32.8183311997763, 32.0369423616864, 32.0369423616864, 30.7346276315365, 29.8230073204316, 29.0416184823417, 29.0416184823417, 28.9113870093268, 27.4788408061619, 27.6090722791769, 27.3486093331469, 27.0881463871170, 25.7858316569671, 26.5672204950570, 26.9579149141020, 27.3486093331469, 28.6509240632968, 27.9997666982219, 29.3020814283717, 29.9532387934466, 29.5625443744017, 31.1253220505815, 30.6043961585216, 32.1671738347014, 34.2508774029412, 33.9904144569112, 33.7299515108812, 35.4229606600760, 36.2043494981659, 36.8555068632409, 37.6368957013308, 37.8973586473607, 38.9392104314806, 38.6787474854507, 39.1996733775106, 39.4601363235406, 39.9810622156005, 39.8508307425855, 41.0229139997204, 41.5438398917803, 40.7624510536904, 42.0647657838403, 41.5438398917803, 40.8926825267054, 41.8043028378103, 42.5856916759002, 42.7159231489152, 42.4554602028852, 43.4973119870051, 43.1066175679602, 44.5391637711250, 42.8461546219302, 43.7577749330351, 41.6740713647953, 41.6740713647953, 40.6322195806754, 40.7624510536904, 40.5019881076604, 38.5485160124357, 38.8089789584656, 36.2043494981659, 34.5113403489711, 32.8183311997763, 30.4741646855066, 28.7811555363118, 27.6090722791769, 26.9579149141020, 25.0044428188772, 23.8323595617423, 22.2695818855625, 23.1812021966674, 22.3998133585775, 21.3579615744576, 21.6184245204876, 19.6649524252628, 19.1440265332028, 18.6231006411429, 19.2742580062178, 18.1021747490830, 16.9300914919481, 16.5393970729031, 15.3673138157683, 13.2836102475285, 11.1999066792887, 11.9812955173787, 10.2882863681838, 9.89759194913889, 8.85574016501900, 6.51157365074927, 5.86041628567434, 3.77671271743458, 2.08370356823977, 1.82324062220980, 0.390694419044956, -1.30231473014985, -0.390694419044956, -2.34416651426974, -2.21393504125475, -1.56277767617982, -2.21393504125475, -1.69300914919481, -1.17208325713487, 0.130231473014985, 2.08370356823977, 2.99532387934466, 2.99532387934466, 3.25578682537463, 2.60462946029971, 0.911620311104898, -0.260462946029971, -0.260462946029971, 0.130231473014985, 0., 0.260462946029971, -0.520925892059941, 0.520925892059941, -0.520925892059941, 0., -1.04185178411988, -0.520925892059941, -0.651157365074927, 0.781388838089912, 0.260462946029971, 0.390694419044956, -0.130231473014985, 0., -0.130231473014985, 0., 0.130231473014985, 0.781388838089912, 0., -0.130231473014985, -0.260462946029971, 1.04185178411988, 0., 0.130231473014985, 0.260462946029971, -0.911620311104898, -0.130231473014985, 0.260462946029971, 0., 0., -0.130231473014985, 0.260462946029971, 0., -1.04185178411988, 0., 0.130231473014985, -0.651157365074927, -0.260462946029971, -0.390694419044956, -0.260462946029971, -0.781388838089912, -0.390694419044956, 0.651157365074927, 0., 0., 0.130231473014985, -0.130231473014985, 0., -0.130231473014985, 0., 0., -1.17208325713487, 0., 0.390694419044956, -0.260462946029971, -0.260462946029971, -0.651157365074927, -0.651157365074927, -0.130231473014985, 0., 0., 0., -0.130231473014985, -1.04185178411988, -0.130231473014985, 0.260462946029971, -0.260462946029971, 0.651157365074927, -0.651157365074927, -0.651157365074927, -0.260462946029971, -0.781388838089912, -0.651157365074927, -0.781388838089912, -0.390694419044956, -0.390694419044956, -0.390694419044956, 0.390694419044956, -0.260462946029971, 0., 0.781388838089912, 0., 0.390694419044956, 0., 0., -1.30231473014985, 0., 1.04185178411988, 1.17208325713487, 0., 0.130231473014985, 0.260462946029971, 0., 1.43254620316484, 0.911620311104898, 0.651157365074927, 0., 0., 0.390694419044956, 0.651157365074927, 1.30231473014985, 0.260462946029971, -0.651157365074927, 0.260462946029971, 0.911620311104898, -0.260462946029971, 0., 0., 0.390694419044956, 0.260462946029971, -0.260462946029971, -0.130231473014985, 0.390694419044956, 0.520925892059941, 0.651157365074927, -0.390694419044956, -0.260462946029971, -1.04185178411988, 0.781388838089912, 0.651157365074927, 0., 0.520925892059941, 0., 0.130231473014985, 0., 0.911620311104898, 0.781388838089912, 0.390694419044956, 0.390694419044956, 0.130231473014985, 0.651157365074927, 0., 0.130231473014985, -0.520925892059941, 0.520925892059941, 0.520925892059941, 1.43254620316484, 0.260462946029971, 0.911620311104898, 1.17208325713487, 0.781388838089912, 0., -0.260462946029971, 0.520925892059941, 0.651157365074927, 0.390694419044956, 1.04185178411988, 0.911620311104898, 1.17208325713487, 0.520925892059941, -0.390694419044956, -0.520925892059941, 0.260462946029971, 0.390694419044956, 0.390694419044956, 0.260462946029971, 0., -0.130231473014985, 0., 1.17208325713487, 0.390694419044956, 0.390694419044956, 0.520925892059941, 0.260462946029971, 0.260462946029971, 0., 0.911620311104898, 0., 0.651157365074927, 0.130231473014985, -0.260462946029971, -0.781388838089912, 0.651157365074927, 0.911620311104898, 1.04185178411988, -0.130231473014985, 0.130231473014985, -0.260462946029971, -0.260462946029971, 0.520925892059941, 0.130231473014985, 0.130231473014985, 0.,
      0.539706275763973, 1.61911882729192, 0.539706275763973, 0.539706275763973, 0.539706275763973, 1.07941255152795, 0., 0., 0.539706275763973, 2.15882510305589, 1.61911882729192, 1.07941255152795, 1.61911882729192, 1.07941255152795, 0., 0.539706275763973, 1.07941255152795, 3.77794393034781, 10.2544192395155, 30.7632577185465, 83.1147664676519, 174.325127071763, 227.216342096633, 229.375167199689, 252.582537057539, 280.107557121502, 295.759039118657, 314.648758770396, 330.300240767552, 350.809079246582, 359.444379658806, 361.063498486098, 362.682617313390, 365.381148692210, 370.238505174086, 376.175274207489, 383.191455792421, 391.826756204644, 401.001762892632, 411.256182132147, 422.050307647427, 433.923845714234, 446.876796332570, 459.290040675141, 470.084166190421, 480.878291705700, 492.751829772507, 504.625367839315, 517.578318457650, 531.070975351749, 542.404807142793, 555.897464036892, 569.929827206756, 584.501896652383, 599.613672373774, 617.423979473985, 634.154874022668, 650.885768571352, 667.616663120035, 683.268145117190, 697.840214562817, 714.571109111500, 730.762297384419, 749.112310760395, 765.303499033314, 784.193218685053, 801.463819509500, 816.575595230891, 832.766783503810, 848.418265500966, 862.450628670829, 875.403579289164, 888.896236183264, 901.849186801599, 912.643312316878, 923.437437832158, 931.533031968617, 940.168332380841, 947.724220241537, 953.660989274940, 960.677170859872, 966.613939893276, 972.011002650915, 976.328652857027, 979.027184235847, 983.884540717723, 984.963953269251, 985.503659545015, 985.503659545015, 985.503659545015, 983.884540717723, 981.725715614667, 979.566890511611, 975.788946581263, 973.090415202443, 969.312471272096, 964.455114790220, 960.677170859872, 955.819814377996, 950.962457896120, 946.105101414245, 940.168332380841, 933.691857071673, 929.374206865562, 921.278612729102, 915.881549971462, 909.405074662295, 903.468305628891, 898.071242871251, 893.213886389375, 888.356529907500, 884.578585977152, 880.260935771040, 877.022698116456, 874.324166737636, 871.625635358817, 867.847691428469, 866.228572601177, 862.990334946593, 862.450628670829, 860.831509843537, 860.291803567773, 859.212391016245, 859.752097292009, 859.752097292009, 860.291803567773, 862.450628670829, 864.069747498121, 866.228572601177, 869.466810255761, 873.244754186108, 875.943285564928, 879.721229495276, 884.578585977152, 888.896236183264, 893.753592665139, 898.071242871251, 903.468305628891, 907.246249559239, 911.563899765350, 915.341843695698, 919.119787626046, 922.897731556394, 926.135969210978, 928.294794314034, 933.152150795909, 935.310975898965, 939.088919829313, 941.247744932369, 943.406570035425, 946.644807690009, 949.343339068829, 950.962457896120, 953.660989274940, 955.280108102232, 956.359520653760, 957.438933205288, 957.438933205288, 954.740401826468, 952.581576723412, 950.422751620357, 951.502164171884, 940.168332380841, 932.612444520145, 922.358025280630, 909.405074662295, 897.531536595487, 882.959467149860, 868.927103979997, 851.116796879785, 835.465314882630, 816.035888955127, 795.527050476096, 777.177037100121, 755.049079793798, 734.540241314767, 710.253458905389, 689.204914150594, 665.997544292743, 642.790174434892, 619.582804577041, 596.915140994954, 573.168064861339, 549.960695003489, 526.753325145638, 504.625367839315, 480.878291705700, 457.670921847849, 436.082670817290, 412.875300959439, 390.207637377353, 368.079680071030, 344.872310213179, 322.204646631092, 300.076689324769, 275.789906915390, 252.582537057539, 229.375167199689, 205.088384790310, 180.261896105167, 154.895701144260, 131.688331286409, 111.719199083142, 94.9883045344593, 80.4162350888320, 67.4632844704966, 57.2088652309811, 47.4941522672296, 39.3985581307700, 32.3823765458384, 24.8264886851428, 18.3500133759751, 10.2544192395155, 4.85735648187576, 1.07941255152795, 2.15882510305589, 2.69853137881987, 3.23823765458384, 1.61911882729192, 1.07941255152795, 2.15882510305589, 2.69853137881987, 2.15882510305589, 2.69853137881987, 2.69853137881987, 2.15882510305589, 2.69853137881987, 2.69853137881987, 2.15882510305589, 2.69853137881987, 2.15882510305589, 2.69853137881987, 2.15882510305589, 2.15882510305589, 1.61911882729192, 1.61911882729192, 2.15882510305589, 2.15882510305589, 1.61911882729192, 1.61911882729192, 2.15882510305589, 1.61911882729192, 1.61911882729192, 2.15882510305589, 1.61911882729192, 2.69853137881987, 1.61911882729192, 2.15882510305589, 1.61911882729192, 1.07941255152795, 2.15882510305589, 2.15882510305589, 1.07941255152795, 2.69853137881987, 1.61911882729192, 1.61911882729192, 2.69853137881987, 2.15882510305589, 1.07941255152795, 2.15882510305589, 2.15882510305589, 1.61911882729192, 1.07941255152795, 2.15882510305589, 1.07941255152795, 2.15882510305589, 1.07941255152795, 2.15882510305589, 1.61911882729192, 2.15882510305589, 1.07941255152795, 1.61911882729192, 1.07941255152795, 1.61911882729192, 1.61911882729192, 1.61911882729192, 1.61911882729192, 2.15882510305589, 1.61911882729192, 2.15882510305589, 1.07941255152795, 1.61911882729192, 1.61911882729192, 2.15882510305589, 1.61911882729192, 1.61911882729192, 1.61911882729192, 2.15882510305589, 1.07941255152795, 1.61911882729192, 1.61911882729192, 1.61911882729192, 2.15882510305589, 2.15882510305589, 1.61911882729192, 1.61911882729192, 1.61911882729192, 2.69853137881987, 1.61911882729192, 2.15882510305589, 1.61911882729192, 2.15882510305589, 1.61911882729192, 2.15882510305589, 1.61911882729192, 1.61911882729192, 1.61911882729192, 1.61911882729192, 2.15882510305589, 2.69853137881987, 2.15882510305589, 1.61911882729192, 1.61911882729192, 2.15882510305589, 2.15882510305589, 2.15882510305589, 1.07941255152795, 1.61911882729192, 1.07941255152795, 1.61911882729192, 2.15882510305589, 1.61911882729192, 1.07941255152795, 1.61911882729192, 1.61911882729192, 2.15882510305589, 1.07941255152795, 2.69853137881987, 2.15882510305589, 1.61911882729192, 1.61911882729192, 1.07941255152795, 1.07941255152795, 1.61911882729192, 1.07941255152795, 1.07941255152795, 1.61911882729192, 1.07941255152795, 0.539706275763973, 1.07941255152795, 1.61911882729192, 1.61911882729192, 2.15882510305589, 2.15882510305589, 2.15882510305589, 2.69853137881987, 2.15882510305589, 2.69853137881987, 1.07941255152795, 1.61911882729192, 1.61911882729192, 2.15882510305589, 1.07941255152795, 2.69853137881987, 1.61911882729192, 1.61911882729192, 2.15882510305589, 2.15882510305589, 1.61911882729192, 1.07941255152795, 1.61911882729192, 1.61911882729192, 1.07941255152795, 1.61911882729192, 1.07941255152795, 2.69853137881987, 2.15882510305589, 1.61911882729192, 1.07941255152795, 2.15882510305589, 1.61911882729192, 2.15882510305589, 1.07941255152795, 2.69853137881987, 1.07941255152795, 2.15882510305589, 0.539706275763973, 1.61911882729192, 1.07941255152795, 1.07941255152795, 1.07941255152795, 2.69853137881987, 0.539706275763973, 2.15882510305589, 1.61911882729192, 1.61911882729192, 0.539706275763973, 2.15882510305589, 1.61911882729192, 2.15882510305589, 1.61911882729192, 1.61911882729192, 1.07941255152795, 1.61911882729192, 1.61911882729192, 1.07941255152795, 0.539706275763973, 1.07941255152795, 1.61911882729192, 1.61911882729192,
    };
    for (unsigned i = 0 ; i < 400u ; ++i)
    {
      auto msg = std::to_string(i);
      TSM_ASSERT_DELTA(msg, wrench->data()[i],       fref[i],      1e-10);
      TSM_ASSERT_DELTA(msg, wrench->data()[i+400u ], fref[i+400u], 1e-10);
      TSM_ASSERT_DELTA(msg, wrench->data()[i+800u ], fref[i+800u], 1e-10);
    };
  };
};

CXXTEST_SUITE_REGISTRATION(BSFReaderTest)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, capability)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, supportedTrialFormats)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, detectNoDevice)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, detectDeviceNotOpen)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, detectEmptyFile)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, detectFail)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, detectOk)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, queryOkOne)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, queryOkTwo)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, queryOkThree)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, fileTrial01868)
CXXTEST_TEST_REGISTRATION(BSFReaderTest, fileTrial03361)