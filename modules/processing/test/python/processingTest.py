import ma.processing
import unittest
import numpy as np

class ProcessingTest(unittest.TestCase):
    def test_butterworth_zero_lag_low_pass_analog(self):
        data = [0.269798891254315, 0.548893273936043, 0.859470031283581, 1.083314451319253, 1.181526336501076, 1.257304313666979, 1.276759551809656, 1.068465704696009, 0.685668156305006, 0.372268495814636, 0.157220415283078,-0.104162709960200,-0.411133031729557,-0.666435823989357,-0.821984136929495,-0.833236901328857,-0.709580252798482,-0.542015408017795,-0.372916081515782,-0.174340534581690, 0.072920410968047, 0.380822922154266, 0.767727734946687, 1.120370101251430, 1.245206330432570, 1.175867152632213, 1.092613558545766, 1.006391390249807, 0.809008427785796, 0.500882870473192,0.177427442323182,-0.115265050765107,-0.399394457537441,-0.683974764754652,-0.867972546429597,-0.841912916291380,-0.686986990511049,-0.548614709893092,-0.431855109908579,-0.225316251342442,0.149990554410562, 0.548991274928445, 0.766603662161258, 0.897492808926710, 1.119235616431332, 1.308820691731916, 1.244650590294634, 0.982001470310733, 0.740054381757683, 0.537145589228529,0.241231226499049,-0.153720986008040,-0.506910201501367,-0.663739279012461,-0.656372165803181,-0.667496462570363,-0.676804487342212,-0.520053642587747,-0.227506579633197, 0.073377651136435, 0.334500818135176, 0.537846810887783, 0.716580939359015, 0.908624646571194, 1.038847705160293, 1.081244298319416, 1.110278804941418, 1.053114775703411, 0.816052544461935, 0.519935281836539,0.261179617911776,-0.018178988662816,-0.328756149855888,-0.622570989208225,-0.849673221482816,-0.901019340312481,-0.760265237435191,-0.571478064861968,-0.381544623107748,-0.141512050095412,0.126109968176025]
        ref = [0.269798891261088, 0.556750494481059, 0.837639550689753, 1.05170782780124, 1.17579244936994, 1.24302331725988, 1.21944440896103, 1.02456046513212, 0.703051673641974, 0.396977077696546, 0.145614906096657, -0.115606496765273, -0.398129299224639, -0.641279251047927, -0.785621929835143, -0.799257171071498, -0.698479428945550, -0.541589407752543, -0.365486766877003, -0.162065813318965, 0.0882179461850634, 0.400674769026374, 0.759042196814361, 1.06304197155685, 1.19631544487594, 1.17226410846896, 1.09179880471148, 0.978416116685996, 0.781131186310728, 0.496989302330060, 0.185148164030461, -0.113098036515398, -0.399447198063161, -0.658602686951213, -0.815100514647356, -0.809447720033578, -0.691084109578709, -0.554000923058926, -0.409230334874926, -0.182876206066244, 0.155933152396641, 0.503410130450450, 0.744777476665554, 0.920240123033550, 1.11107061457078, 1.24497558881929, 1.19468389896834, 0.987111415426758, 0.749816684110644, 0.513758832420659, 0.216334800195200, -0.143180521473855, -0.457490637970223, -0.622411393766237, -0.660923380016051, -0.666958654861107, -0.635031146928926, -0.485859018803136, -0.225360022547793, 0.0633664990587942, 0.319957468260014, 0.531642114190447, 0.719875140812418, 0.893060311669299, 1.01675288692063, 1.07779281123948, 1.08852755678891, 1.00786217509059, 0.801145064136580, 0.529272614014537, 0.256009544847483, -0.0260199750629534, -0.324527360601293, -0.605713059415040, -0.805397970647959, -0.852659385822292, -0.748097268362033, -0.571135853735994, -0.368948801080136, -0.134556731080026, 0.126109966992686]
        ts = ma.TimeSequence('foo',1,81,100.0,0.0,ma.TimeSequence.Type_Analog,'V')
        ts.setData(np.array([data]).T)
        self.assertEqual(ma.processing.filter_butterworth_zero_lag([ts],ma.processing.Response_LowPass,20.0,2), True)
        out = ts.data()
        for i in xrange(0,81):
            self.assertAlmostEqual(out[i], ref[i], 7)
        
    def test_butterworth_zero_lag_low_pass_reconstructed(self):
        data = [0.269798891254315, 0.548893273936043, 0.859470031283581, 1.083314451319253, 1.181526336501076, 1.257304313666979, 1.276759551809656, 1.068465704696009, 0.685668156305006, 0.372268495814636, 0.157220415283078,-0.104162709960200,-0.411133031729557,-0.666435823989357,-0.821984136929495,-0.833236901328857,-0.709580252798482,-0.542015408017795,-0.372916081515782,-0.174340534581690, 0.072920410968047, 0.380822922154266, 0.767727734946687, 1.120370101251430, 1.245206330432570, 1.175867152632213, 1.092613558545766, 1.006391390249807, 0.809008427785796, 0.500882870473192,0.177427442323182,-0.115265050765107,-0.399394457537441,-0.683974764754652,-0.867972546429597,-0.841912916291380,-0.686986990511049,-0.548614709893092,-0.431855109908579,-0.225316251342442,0.149990554410562, 0.548991274928445, 0.766603662161258, 0.897492808926710, 1.119235616431332, 1.308820691731916, 1.244650590294634, 0.982001470310733, 0.740054381757683, 0.537145589228529,0.241231226499049,-0.153720986008040,-0.506910201501367,-0.663739279012461,-0.656372165803181,-0.667496462570363,-0.676804487342212,-0.520053642587747,-0.227506579633197, 0.073377651136435, 0.334500818135176, 0.537846810887783, 0.716580939359015, 0.908624646571194, 1.038847705160293, 1.081244298319416, 1.110278804941418, 1.053114775703411, 0.816052544461935, 0.519935281836539,0.261179617911776,-0.018178988662816,-0.328756149855888,-0.622570989208225,-0.849673221482816,-0.901019340312481,-0.760265237435191,-0.571478064861968,-0.381544623107748,-0.141512050095412,0.126109968176025]
        ref = [[0.291660028, 0.565287139, 0.813669574, 1.01067018, 1.134069037, 1.168219095, 1.106033864, 0.952326377, 0.725722533, 0.453995496, 0.165365056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.087430096, 0.416285788, 0.713950497, 0.947799244, 1.092730326, 1.137534335, 1.084573407, 0.944459908, 0.732860592, 0.471230282, 0.187148982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.169508982, 0.457839033, 0.719685682, 0.93137081, 1.07322077, 1.128839422, 1.089750982, 0.961423677, 0.762412683, 0.517633828, 0.253263523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.078769178, 0.313514513, 0.537081905, 0.735855316, 0.89635526, 1.005037296, 1.049581123, 1.021010974, 0.916547735, 0.743217847, 0.519232652, 0.270749678, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
               [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]]
        root = ma.Node('root')
        ts = ma.TimeSequence('foo',4,81,100.0,0.0,ma.TimeSequence.Type_Position,'mm',root)
        ts.setData(np.array([data]).T * np.ones([4]))
        tss = [ts,ma.TimeSequence(ts.clone(root))]
        self.assertEqual(ma.processing.filter_butterworth_zero_lag(tss,ma.processing.Response_LowPass,6.0,4), True)
        out1 = tss[0].data()
        out2 = tss[1].data()
        for i in xrange(0,81):
            self.assertAlmostEqual(out1[i][0], ref[0][i], 7)
            self.assertAlmostEqual(out1[i][1], ref[0][i], 7)
            self.assertAlmostEqual(out1[i][2], ref[0][i], 7)
            self.assertAlmostEqual(out1[i][3], ref[1][i], 7)
            self.assertAlmostEqual(out2[i][0], ref[0][i], 7)
            self.assertAlmostEqual(out2[i][1], ref[0][i], 7)
            self.assertAlmostEqual(out2[i][2], ref[0][i], 7)
            self.assertAlmostEqual(out2[i][3], ref[1][i], 7)
