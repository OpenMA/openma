#include <cxxtest/TestDrive.h>

#include <openma/body/inversedynamicsmatrix.h>
#include <openma/body/model.h>
#include <openma/body/segment.h>
#include <openma/body/joint.h>
#include <openma/body/inertialparameters.h>
#include <openma/body/enums.h>
#include <openma/body/anchor.h>
#include <openma/body/chain.h>
#include <openma/base/timesequence.h>

#include <openma/math.h>

void dyninv_compare_data(ma::body::Model* model, const std::string& jntname, unsigned samples, const double* frc, const double* trq)
{
  auto force = model->joints()->findChild<const ma::TimeSequence*>(jntname+".Force",{{"type",ma::TimeSequence::Force},{"components",4}});
  auto moment = model->joints()->findChild<const ma::TimeSequence*>(jntname+".Moment",{{"type",ma::TimeSequence::Moment},{"components",4}});
  TS_ASSERT_DIFFERS(force, nullptr);
  TS_ASSERT_EQUALS(force->samples(), samples);
  TS_ASSERT_DIFFERS(moment, nullptr);
  TS_ASSERT_EQUALS(moment->samples(), samples);
  const double deltaF = 1e-5;
  const double deltaM = 1e-5;
  for (unsigned i = 0 ; i < samples ; ++i)
  {
    TSM_ASSERT_DELTA(force->name()+".X #"+std::to_string(i), force->data()[i]            , frc[i]           , deltaF);
    TSM_ASSERT_DELTA(force->name()+".Y #"+std::to_string(i), force->data()[i +   samples], frc[ +   samples], deltaF);
    TSM_ASSERT_DELTA(force->name()+".Z #"+std::to_string(i), force->data()[i + 2*samples], frc[ + 2*samples], deltaF);
    TSM_ASSERT_DELTA(moment->name()+".X #"+std::to_string(i), moment->data()[i]            , trq[i]           , deltaM);
    TSM_ASSERT_DELTA(moment->name()+".Y #"+std::to_string(i), moment->data()[i +   samples], trq[ +   samples], deltaM);
    TSM_ASSERT_DELTA(moment->name()+".Z #"+std::to_string(i), moment->data()[i + 2*samples], trq[ + 2*samples], deltaM);    
  }
}

CXXTEST_SUITE(InverseDynamicMatrixTest)
{
  CXXTEST_TEST(gait)
  {
    ma::Node root("Root");
    ma::body::Model model("M1",&root);
    double g[3] = {0., -9810., 0.};
    model.setGravity(g); // mm.s^-2
    
    auto segments = model.segments();
    auto joints = model.joints();
    auto chains = model.chains();
    
    ma::body::Segment foot("R.Foot", ma::body::Part::Foot, ma::body::Side::Right, segments);
    ma::body::Segment shank("R.Shank", ma::body::Part::Shank, ma::body::Side::Right, segments);
    ma::body::Segment thigh("R.Thigh", ma::body::Part::Thigh, ma::body::Side::Right, segments);
    ma::body::Segment pelvis("Pelvis", ma::body::Part::Pelvis, ma::body::Side::Center, segments);
    
    ma::body::Joint ankle("R.Ankle", &shank, ma::body::Anchor::origin(&foot), &foot, joints);
    ma::body::Joint knee("R.Knee", &thigh, ma::body::Anchor::origin(&shank), &shank, joints);
    ma::body::Joint hip("R.Hip", &pelvis, ma::body::Anchor::origin(&thigh), &thigh, joints);
    
    ma::body::Chain lowerlimb("R.LowerLimb", {{&hip, &knee, &ankle}}, chains);
    
    double relcom[4][3] = {
      { 54.0526,   -21.3663 ,   3.6790 }, // foot
      {-22.1367,  -189.084  ,   3.2283 }, // shank
      {-18.622 ,  -194.846  ,  14.988  }, // thigh
      {  2.5438,   -25.43787,  -0.54510}  // pelvis
    };
    
    double relinertia[4][9] = {
      {6.24925470579212e+02, 0., 0., 0., 2.96028709073682e+03, 0., 0., 0., 2.80243394418913e+03},
      {7.20347164309006e+04, 0., 0., 0., 9.18810158557406e+03, 0., 0., 0., 7.20347164309006e+04},
      {1.92048657677671e+05, 0., 0., 0., 5.13804375475340e+04, 0., 0., 0., 2.05521750190136e+05},
      {1.07601694913786e+05, 0., 0., 0., 1.18519031864651e+05, 0., 0., 0., 9.51970685812099e+04}
    };
    
    new ma::body::InertialParameters("R.Foot.BSIP",   1.08, relcom[0], relinertia[0], &foot);
    new ma::body::InertialParameters("R.Shank.BSIP",  4.32, relcom[1], relinertia[1], &shank);
    new ma::body::InertialParameters("R.Thigh.BSIP", 11.07, relcom[2], relinertia[2], &thigh);
    new ma::body::InertialParameters("Pelvis.BSIP",  12.78, relcom[3], relinertia[3], &pelvis);
    
    const unsigned numeltsscs = 130;
    auto tss = ma::make_nodes<ma::TimeSequence*>(4, 13, 10, 100.0, 0.0, ma::TimeSequence::Pose, "");
    
    // Data for the foot
    tss[0]->setName("R.Foot.SCS");
    tss[0]->addParent(&foot);
    const double footscsdata[numeltsscs] = {
      0.90926, 0.9095, 0.90888, 0.9074, 0.90533, 0.90319, 0.90164, 0.90107, 0.90141, 0.9023,
      0.14403, 0.12366, 0.09823, 0.07004, 0.0417, 0.01558, -0.00674, -0.0246, -0.03807, -0.04769,
      0.39051, 0.39689, 0.40533, 0.41438, 0.42266, 0.42895, 0.43242, 0.43299, 0.43129, 0.42846,
      -0.12315, -0.09854, -0.06712, -0.03158, 0.00472, 0.03852, 0.06753, 0.09074, 0.10827, 0.12089,
      0.98931, 0.99165, 0.99365, 0.99459, 0.99412, 0.99237, 0.98981, 0.98699, 0.9843, 0.98198,
      -0.07815, -0.08316, -0.09031, -0.09895, -0.10819, -0.11716, -0.12538, -0.13276, -0.13941, -0.14528,
      -0.39759, -0.40386, -0.41163, -0.41907, -0.42469, -0.4275, -0.42717, -0.42408, -0.41922, -0.41381,
      0.02297, 0.03653, 0.05487, 0.07671, 0.09994, 0.12234, 0.14225, 0.15891, 0.17236, 0.18288,
      0.91728, 0.91409, 0.9097, 0.90471, 0.89981, 0.8957, 0.89291, 0.89157, 0.89138, 0.8918,
      826.32837, 832.89762, 838.19049, 842.49298, 846.065, 849.08362, 851.62637, 853.71509, 855.38028, 856.69122,
      81.19634, 79.14663, 77.07691, 75.17602, 73.58755, 72.3748, 71.52374, 70.97495, 70.65585, 70.49444,
      134.22374, 133.15111, 131.87849, 130.60663, 129.50348, 128.66345, 128.08866, 127.71987, 127.49569, 127.38464,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
    };
    std::copy_n(footscsdata, numeltsscs, tss[0]->data());
    
    // Data for the shank
    tss[1]->setName("R.Shank.SCS");
    tss[1]->addParent(&shank);
    const double shankscsdata[numeltsscs] = {
      0.80115, 0.79972, 0.7986, 0.79821, 0.79927, 0.80261, 0.8089, 0.81818, 0.8297, 0.84214,
      0.27674, 0.26793, 0.25555, 0.24087, 0.22516, 0.20934, 0.19384, 0.17858, 0.16329, 0.14776,
      0.53064, 0.53727, 0.54492, 0.55212, 0.55719, 0.55856, 0.55508, 0.54653, 0.53379, 0.51863,
      -0.32041, -0.31447, -0.30507, -0.29313, -0.27949, -0.26474, -0.24915, -0.23275, -0.21558, -0.19789,
      0.94722, 0.94925, 0.95233, 0.95605, 0.96006, 0.96413, 0.96814, 0.97205, 0.9758, 0.97931,
      -0.01024, -0.0053, 0.00048, 0.00668, 0.01295, 0.01907, 0.02499, 0.03081, 0.03659, 0.04232,
      -0.50547, -0.51142, -0.51882, -0.52624, -0.53202, -0.53453, -0.53255, -0.52575, -0.5149, -0.50164,
      -0.16182, -0.16471, -0.16662, -0.16717, -0.16608, -0.16318, -0.15852, -0.15241, -0.14543, -0.13826,
      0.84754, 0.84339, 0.83849, 0.83374, 0.83028, 0.82925, 0.83142, 0.83687, 0.84483, 0.85395,
      678.95081, 688.18839, 697.74103, 707.47815, 717.27279, 727.02881, 736.70306, 746.30301, 755.84177, 765.28085,
      516.88076, 515.96872, 515.51837, 515.53659, 516.00245, 516.87295, 518.08813, 519.56851, 521.20685, 522.87353,
      129.51445, 130.71146, 132.09829, 133.68383, 135.4714, 137.45421, 139.61703, 141.93875, 144.39008, 146.93189,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
    };
    std::copy_n(shankscsdata, numeltsscs, tss[1]->data());
    
    // Data for the thigh
    tss[2]->setName("R.Thigh.SCS");
    tss[2]->addParent(&thigh);
    const double thighscsdata[numeltsscs] = {
      0.87942, 0.8807, 0.8812, 0.88124, 0.88127, 0.88177, 0.88309, 0.88538, 0.88851, 0.89227,
      0.35694, 0.35152, 0.34648, 0.3417, 0.33711, 0.33271, 0.32854, 0.32464, 0.32093, 0.31715,
      0.31498, 0.31749, 0.32163, 0.32658, 0.33123, 0.33436, 0.33498, 0.33273, 0.32795, 0.32136,
      -0.38103, -0.37647, -0.37261, -0.36922, -0.36603, -0.36279, -0.35935, -0.35567, -0.3517, -0.34731,
      0.92442, 0.92624, 0.92774, 0.92902, 0.93021, 0.93139, 0.93263, 0.93395, 0.93536, 0.93691,
      0.01627, 0.0188, 0.02147, 0.02427, 0.02712, 0.02995, 0.03266, 0.03519, 0.03751, 0.03969,
      -0.28537, -0.28746, -0.29095, -0.29511, -0.29897, -0.30145, -0.30168, -0.29933, -0.29471, -0.2885,
      -0.13433, -0.13608, -0.13876, -0.14197, -0.14514, -0.14771, -0.14922, -0.1495, -0.14867, -0.14702,
      0.94896, 0.94808, 0.94662, 0.94486, 0.94316, 0.94197, 0.94166, 0.94236, 0.94395, 0.94613,
      504.50108, 516.05316, 527.59499, 539.10154, 550.5597, 561.96991, 573.34523, 584.70657, 596.07589, 607.47111,
      940.35724, 939.72515, 939.40242, 939.45737, 939.94562, 940.89985, 942.32071, 944.17167, 946.3805, 948.84813,
      136.99805, 139.34155, 141.93793, 144.78835, 147.86608, 151.12409, 154.50813, 157.96932, 161.47398, 165.00562,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
    };
    std::copy_n(thighscsdata, numeltsscs, tss[2]->data());
    
    // Data for the pelvis
    tss[3]->setName("Pelvis.SCS");
    tss[3]->addParent(&pelvis);
    const double pelvisscsdata[numeltsscs] = {
      0.99697, 0.99715, 0.99734, 0.99752, 0.99769, 0.99785, 0.99798, 0.99807, 0.99813, 0.99815,
      -0.05634, -0.05573, -0.05459, -0.05288, -0.05065, -0.04797, -0.04493, -0.04164, -0.0382, -0.03475,
      0.05359, 0.05082, 0.04839, 0.04647, 0.0452, 0.04469, 0.04497, 0.04601, 0.04769, 0.04981,
      0.05462, 0.05408, 0.05309, 0.0516, 0.04964, 0.04726, 0.04452, 0.04151, 0.03833, 0.03509,
      0.99796, 0.99798, 0.99809, 0.99827, 0.9985, 0.99874, 0.99896, 0.99913, 0.99926, 0.99937,
      0.03304, 0.03329, 0.03167, 0.02816, 0.02303, 0.01682, 0.01017, 0.0038, -0.00172, -0.00595,
      -0.05534, -0.05257, -0.05002, -0.04787, -0.0463, -0.04544, -0.04538, -0.04613, -0.04759, -0.04957,
      -0.03002, -0.03045, -0.02901, -0.02569, -0.02074, -0.01467, -0.00815, -0.00188, 0.00354, 0.00768,
      0.99802, 0.99815, 0.99833, 0.99852, 0.99871, 0.99886, 0.99894, 0.99893, 0.99886, 0.99874,
      453.52041, 464.69006, 476.00707, 487.45013, 498.98967, 510.59236, 522.22461, 533.8558, 545.4604, 557.01777,
      1012.0196, 1011.34024, 1010.81482, 1010.49242, 1010.42546, 1010.6612, 1011.23347, 1012.15664, 1013.4219, 1014.99849,
      0.48944, 3.00588, 5.63263, 8.35982, 11.17121, 14.05009, 16.98623, 19.98047, 23.04501, 26.19963,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
    };
    std::copy_n(pelvisscsdata, numeltsscs, tss[3]->data());
    
    // Data for the force plate
    const unsigned numeltsfpw = 100;
    auto fpw = new ma::TimeSequence("FP",10,10,100.0,0.0,ma::TimeSequence::Wrench,"",&foot);
    const double fpwdata[numeltsfpw] = {
      -3.204994986, -6.904499734, -12.46543959, -20.6552186, -31.74770528, -45.07441273, -59.04126378, -71.71809144, -81.61670455, -88.15381374,
      25.10225164, 84.72425615, 160.1290089, 244.102034, 327.3166058, 400.7754785, 458.1110791, 497.088281, 519.9451249, 532.5405402,
      10.3044042, 15.08061632, 19.5037894, 22.4977058, 23.17606516, 21.11996012, 16.44891422, 9.658915206, 1.390812231, -7.691279405,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      -2759.307465, -1972.756057, -1208.38649, -367.8887048, 441.8162883, 1089.5232, 1479.081299, 1587.020024, 1468.261548, 1229.60892,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      791.6657928, 832.407311, 843.5655802, 849.9286335, 854.5858306, 858.437304, 861.8654872, 865.0797405, 868.2157782, 871.3653345,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      113.8905211, 104.8257623, 103.91703, 104.1545245, 104.7243963, 105.4246041, 106.1859755, 106.9735808, 107.761387, 108.5322263,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
    };
    std::copy_n(fpwdata, numeltsfpw, fpw->data());
    
    ma::body::InverseDynamicMatrix dyninv;
    dyninv.run(&root);
    
    const unsigned numeltsdyn = 30;
    const double anklefrc[numeltsdyn] = {
      -4.789374, -4.111508, 0.311366, 12.096281, 26.095467, 41.23781, 56.048778, 69.089908, 79.784919, 86.982453,
      -15.9408, -75.421619, -149.026969, -230.091597, -311.419649, -384.213939, -441.85016, -481.677439, -506.268064, -520.0824,
      -10.543904, -15.158474, -18.901895, -21.139552, -21.679508, -20.049046, -15.946521, -9.402424, -1.155256, 7.906107
    };
    const double ankletrq[numeltsdyn] = {
      107.987144, -1431.144443, -3271.396676, -5184.930351, -6906.922198, -8316.951567, -9378.736488, -10120.23515, -10594.68358, -10968.84567,
      2105.744226, 1441.048736, 579.880978, -298.801052, -1208.883136, -2020.313061, -2628.91095, -2985.733811, -3089.302551, -3030.525393,
      1416.37887, 804.406735, 378.8427, 257.842451, 246.403991, 301.430346, 328.282905, 196.290864, -252.198524, -1018.15926
    };
    const double kneefrc[numeltsdyn] = {
      -12.202589, -14.931908, -13.276615, -0.596898, 13.611996, 28.778138, 44.197803, 58.514298, 72.453213, 82.153089,
      33.893523, -21.263484, -89.697123, -169.91897, -251.90743, -326.646746, -387.341614, -431.242494, -460.186636, -476.080087,
      -10.458623, -13.689219, -13.575463, -11.316134, -8.840913, -6.277511, -3.250114, 0.805684, 5.663577, 12.83972
    };
    const double kneetrq[numeltsdyn] = {
      5423.165134, 5920.874364, 4841.415631, 2241.231474, -1030.885251, -4833.138184, -9149.144749, -14029.65469, -19290.77629, -25046.29351,
      3714.139035, 3716.274181, 3298.275027, 2540.777919, 1509.738761, 272.4836, -1128.271238, -2633.766954, -4127.650964, -5356.830888,
      -3634.616504, -13512.88307, -22571.87036, -26959.32602, -29495.54974, -29447.26785, -26679.56458, -21778.06574, -15425.60112, -9559.417621
    };
    const double hipfrc[numeltsdyn] = {
      -5.572971, -6.778144, -7.069385, -0.583278, 9.543038, 23.374906, 39.499754, 54.461801, 69.201479, 79.72873,
      162.110506, 118.094877, 63.523541, -12.136409, -91.798749, -167.239383, -232.306694, -284.449724, -328.37231, -354.179099,
      -0.241422, 2.322237, 9.266399, 12.887385, 15.34191, 16.43618, 16.541165, 16.499514, 15.339944, 18.785991
    };
    const double hiptrq[numeltsdyn] = {
      7803.914799, 8250.396968, 5118.08099, 63.528025, -5764.191021, -11938.26723, -18362.38896, -25219.08497, -32024.98041, -40641.50905,
      4740.758006, 4930.69342, 4257.689049, 3400.450394, 2297.349618, 893.124637, -969.72786, -3334.461756, -6027.232768, -8738.607661,
      6011.108421, -13589.78173, -33334.27609, -47294.13311, -58430.20955, -64573.19022, -64961.71659, -60906.75784, -53061.33456, -44895.1094
    };
    
    auto f = model.joints()->findChild<const ma::TimeSequence*>("R.Ankle.Moment",{{"type",ma::TimeSequence::Moment},{"components",4}});
    if (f == nullptr)
      std::cout << "\nERROR" << std::endl;
    else
      std::cout << "\nDATA:\n" << ma::math::to_vector(f).values() << std::endl;
    
    TS_WARN("To finalize!");
    
    // dyninv_compare_data(&model, "R.Ankle", numeltsdyn, anklefrc, ankletrq);
    // dyninv_compare_data(&model, "R.Knee", numeltsdyn, kneefrc, kneetrq);
    // dyninv_compare_data(&model, "R.Hip", numeltsdyn, hipfrc, hiptrq);
  };
  
  CXXTEST_TEST(propulsion)
  {
    TS_WARN("TODO");
  };
};

CXXTEST_SUITE_REGISTRATION(InverseDynamicMatrixTest)
CXXTEST_TEST_REGISTRATION(InverseDynamicMatrixTest, gait)
CXXTEST_TEST_REGISTRATION(InverseDynamicMatrixTest, propulsion)